name: Submit & Delete K8s Job
description: Submit and delete a K8s job after its execution

inputs:
  job-name:
    description: The job name
    required: true
  job-config-file:
    description: Path to the Kubernetes job YAML
    required: true

runs:
  using: "composite"
  steps:
    - name: Submit and Delete Kubernetes job
      uses: ./.github/actions/with-post-step
      with:
        main: |
          set -x
          TIMEOUT_JOB_CREATION=60s
          TIMEOUT_JOB_WAIT=14400s
          TIMEOUT_JOB_START=600s

          echo "Submit K8s job"
          kubectl apply -f "${{ inputs.job-config-file }}"
          kubectl get event | grep ${{ inputs.job-name }}
          # Wait for job to be created
          kubectl wait --for=create job/${{ inputs.job-name }} --timeout=$TIMEOUT_JOB_CREATION

          # Wait for job to be unsuspended
          kubectl wait --for=jsonpath='{.spec.suspend}=false' job/${{ inputs.job-name }} --timeout=$TIMEOUT_JOB_WAIT

          # Wait for pods to be running
          kubectl wait --for=condition=Ready \
            --selector=batch.kubernetes.io/job-name=${{ inputs.job-name }} \
            --timeout=$TIMEOUT_JOB_START pod

          # Stream logs
          kubectl logs --all-containers=true --all-pods=true --follow job/${{ inputs.job-name }}

          # Detect job parallelism
          parallelism=$(kubectl get job/"${{ inputs.job-name }}" -o jsonpath='{.spec.parallelism}')
          # if parallelism is not set, use default value of 1
          echo "Parallelism ${parallelism}"
          if [ -z "${parallelism}" ]; then
            echo "No parallelism specified, defaulting to 1"
            parallelism=1
          fi

          JOB_COMPLETED=false
          RETRIES=0
          MAX_RETRIES=720 #$((TIMEOUT_JOB_WAIT / 20 ))

          while ! $JOB_COMPLETED && [ $RETRIES -lt $MAX_RETRIES ]; do
            STATUS_JSON=$(kubectl get job/"${{ inputs.job-name }}" -o json)
            failures=$(echo "$STATUS_JSON" | jq -r '.status.failed // 0')
            successes=$(echo "$STATUS_JSON" | jq -r '.status.succeeded // 0')
            completions=$(echo "$STATUS_JSON" | jq -r '.status.completions // empty')
            total=$((failures + successes))

            if [ "${successes}" -ge "${completions}" ]; then
              echo "Job ${{ inputs.job-name }} has completed successfully"
              JOB_COMPLETED=true
            elif [ "${failures}" -gt 0 ]; then
              echo "Job ${{ inputs.job-name }} has failed with ${failures} failures"
              JOB_COMPLETED=true
            elif [ "${total}" -ge "${completions}"] && [ "${total}" -ge "${parallelism}" ]; then
              echo "Job ${{ inputs.job-name }} has not completed yet, but all pods have been started: ${successes}/${completions} completed, ${failures} failed"
              JOB_COMPLETED=true
            else
              sleep 20
              RETRIES=$((RETRIES + 1))
            fi
          done

          if ! $JOB_COMPLETED; then
            echo "Job ${{ inputs.job-name }} did not complete within the timeout period (${TIMEOUT_JOB_WAIT})."
            exit 1
          fi

          # Retrieve causes if job failed
          if [ "${failures:-0}" -gt 0 ]; then
            echo "Job ${{ inputs.job-name }} has $failures failures"
            # this is for batch jobs only
            pods=$(kubectl get pods --selector=batch.kubernetes.io/job-name=${{ inputs.job-name }} -o name)
            if [ -n "${pods}" ]; then
              kubectl describe ${pods}
            fi
            exit 1
          fi

        post: |
          echo "Deleting K8s job: ${{ inputs.job-name }}"
          kubectl delete -f "${{ inputs.job-config-file }}"
