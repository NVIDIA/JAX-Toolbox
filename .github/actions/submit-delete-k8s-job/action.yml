name: Submit & Delete K8s Job
description: Submit and delete a K8s job after its execution

inputs:
  job-name:
    description: The job name
    required: true
  job-config-file:
    description: Path to the Kubernetes job YAML
    required: true

runs:
  using: "composite"
  steps:
    - name: Submit and Delete Kubernetes job
      uses: ./.github/actions/with-post-step
      with:
        main: |
          set -x
          TIMEOUT_JOB_CREATION=60s
          TIMEOUT_JOB_WAIT=14400s
          TIMEOUT_JOB_START=600s
          INPUT_JOB_NAME=${{ inputs.job-name }}
          INPUT_JOB_CONFIG_FILE=${{ inputs.job-config-file }}

          echo "Submit K8s job"
          kubectl apply -f "${INPUT_JOB_CONFIG_FILE}"
          kubectl get event | grep ${INPUT_JOB_NAME}
          # Wait for job to be created
          kubectl wait --for=create job/${INPUT_JOB_NAME} --timeout=$TIMEOUT_JOB_CREATION
          # Wait for job to be unsuspended
          kubectl wait --for=jsonpath='{.spec.suspend}=false' job/${INPUT_JOB_NAME} --timeout=$TIMEOUT_JOB_WAIT
          # Wait for pods to be running
          kubectl wait --for=condition=Ready \
            --selector=batch.kubernetes.io/job-name=${INPUT_JOB_NAME} \
            --timeout=$TIMEOUT_JOB_START pod

          # Stream logs
          kubectl logs --all-containers=true --all-pods=true --follow job/${INPUT_JOB_NAME}

          # Detect job parallelism
          parallelism=$(kubectl get job/${INPUT_JOB_NAME} -o jsonpath='{.spec.parallelism}')
          # if parallelism is not set, use default value of 1
          if [ -z "${parallelism}" ]; then
            echo "No parallelism specified, defaulting to 1"
            parallelism=1
          fi

          while true; do
            job_status_counts=$(kubectl get job/${INPUT_JOB_NAME} -o 'jsonpath={.status.failed}:{.status.succeeded}')

            IFS=:
            set -- $job_status_counts
            failures=${1:-0}
            successes=${2:-0}

            total=$((failures + successes))

            echo "status: failures=${failures}, successes=${successes}, total=${total}, parallelism=${parallelism}"

            if [ $total -lt $parallelism ]; then
              # neither "failed" nor "succeeded", so wait
              sleep 2
              continue
            fi
            break
          done


           # If job indicates a failure try to print out the info
          if [ "${failures:-0}" -gt 0 ]; then
            echo "Job ${INPUT_JOB_NAME} has $failures failures"
            # this is for batch jobs only
            pods=$(kubectl get pods --selector=batch.kubernetes.io/job-name=${INPUT_JOB_NAME} -o name)
            if [ -n "${pods}" ]; then
              kubectl describe ${pods}
            fi
            exit 1
          fi

        post: |
          echo "Deleting K8s job: ${{ inputs.job-name }}"
          kubectl delete -f "${{ inputs.job-config-file }}"
