name: Submit & Delete K8s Job
description: Submit and delete a K8s job after its execution

inputs:
  job-name:
    description: The job name
    required: true
  job-config-file:
    description: Path to the Kubernetes job YAML
    required: true

runs:
  using: "composite"
  steps:
    - name: Submit and Delete Kubernetes job
      uses: ./.github/actions/with-post-step
      with: 
        main: |
          echo "Submit K8s job ${{ inputs.job-config-file }}" 
          kubectl apply -f "${{ inputs.job-config-file }}"
          
          # Wait for job to be created
          kubectl wait --for=create job/${{ inputs.job-name }} --timeout=60s
          
          # Wait for job to be unsuspended
          kubectl wait --for=jsonpath='{.spec.suspend}=false' job/${{ inputs.job-name }} --timeout=7200s
          
          # Wait for pods to be running
          kubectl wait --for=condition=Ready \
            --selector=batch.kubernetes.io/job-name=${{ inputs.job-name }} \
            --timeout=600s pod
          
          # Stream logs
          kubectl logs --all-containers=true --all-pods=true --follow job/${{ inputs.job-name }}
          
          # Detect job parallelism 
          parallelism=$(kubectl get job/"${{ inputs.job-name }}" -o jsonpath='{.spec.parallelism}')
          # if parallelism is not set, use default value of 1 
          echo "Parallelism ${parallelism}"
          if [ -z "${parallelism}" ]; then
            echo "No parallelism specified, defaulting to 1"
            parallelism=1
          fi

          failures=0
          successes=0
          # Poll the k8s job for a max of 2 hours, sleep 60s
          max_attempts=120 

          # Check whether the job succeeded or failed
          while [ $attempt -lt $max_attemps ]; do
            # retrieve the current status of the job 
            status="$(kubectl get job/"${{ inputs.job-name }}" -o 'jsonpath={.status.failed}:{.status.succeeded}')"
            failures="${status%:*}"
            successes="${status#*:}"

            failures="${failures:-0}"
            successes="${successes:-0}"
            total=$((failures + successes))

            echo "failures: ${failures}, successes: ${successes} attempt: ${attempt}"

            if [ $total -eq $parallelism ]; then 
              # all pods completed here 

              # check failures
              if [ $failures -gt 0 ]; then 
                echo "Job ${{ inputs.job-name }} has $failures failures"
                kubectl describe job/"${{ inputs.job-name }}"
                exit 1 
              fi

              # no failures, so success 
              break 
            fi

            attempt=$((attempt+1))
            sleep 60 
          done

          if [ $attempt -ge $max_attempts ]; then 
            echo "Job not completed within 2 hours"
            exit 1 
          fi

        post: |
          echo "Deleting K8s job: ${{ inputs.job-name }}"
          kubectl delete -f "${{ inputs.job-config-file }}"
