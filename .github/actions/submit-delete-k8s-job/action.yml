name: Submit & Delete K8s Job
description: Submit and delete a K8s job after its execution

inputs:
  job-name:
    description: The job name
    required: true
  job-config-file:
    description: Path to the Kubernetes job YAML
    required: true

runs:
  using: "composite"
  steps:
    - name: Submit and Delete Kubernetes job
      uses: ./.github/actions/with-post-step
      with:
        main: |
          set -x
          TIMEOUT_JOB_CREATION=60s
          TIMEOUT_JOB_WAIT=14400s
          TIMEOUT_JOB_START=600s

          echo "Submit K8s job"
          kubectl apply -f "${{ inputs.job-config-file }}"
          kubectl get event | grep ${{ inputs.job-name }}
          # Wait for job to be created
          kubectl wait --for=create job/${{ inputs.job-name }} --timeout=$TIMEOUT_JOB_CREATION

          # Wait for job to be unsuspended
          kubectl wait --for=jsonpath='{.spec.suspend}=false' job/${{ inputs.job-name }} --timeout=$TIMEOUT_JOB_WAIT

          # Wait for pods to be running
          kubectl wait --for=condition=Ready \
            --selector=batch.kubernetes.io/job-name=${{ inputs.job-name }} \
            --timeout=$TIMEOUT_JOB_START pod

          # Stream logs
          kubectl logs --all-containers=true --all-pods=true --follow job/${{ inputs.job-name }}

          # Detect job parallelism
          parallelism=$(kubectl get job/"${{ inputs.job-name }}" -o jsonpath='{.spec.parallelism}')
          # if parallelism is not set, use default value of 1
          echo "Parallelism ${parallelism}"
          if [ -z "${parallelism}" ]; then
            echo "No parallelism specified, defaulting to 1"
            parallelism=1
          fi

          while IFS=: read -r failures successes; do
            failures="${failures:-0}"
            successes="${successes:-0}"
            total=$((failures + successes))

            if [ $total -lt $parallelism ]; then
              # neither "failed" nor "succeeded", so wait
              sleep 1
            elif [ $total -eq $parallelism ]; then
              # we have total=parallelism => either X successes or X failures
              # In any case, the job is done
              break
            else
              # Log here
              echo "Unexpected number of completed pods ${total} with parallelism ${parallelism}"
              exit 255
            fi
          done <<EOF
          $(kubectl get job/"${{ inputs.job-name }}" -o 'jsonpath={.status.failed}:{.status.succeeded}')
          EOF

           # If job indicates a failure try to print out the info
          if [ "${failures:-0}" -gt 0 ]; then
            echo "Job ${{ inputs.job-name }} has $failures failures"
            # this is for batch jobs only
            pods=$(kubectl get pods --selector=batch.kubernetes.io/job-name=${{ inputs.job-name }} -o name)
            if [ -n "${pods}" ]; then
              kubectl describe ${pods}
            fi
            exit 1
          fi

        post: |
          echo "Deleting K8s job: ${{ inputs.job-name }}"
          kubectl delete -f "${{ inputs.job-config-file }}"
