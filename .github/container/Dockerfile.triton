# syntax=docker/dockerfile:1-labs
ARG BASE_IMAGE=ghcr.io/nvidia/jax-mealkit:jax
ARG URLREF_JAX_TRITON=https://github.com/jax-ml/jax-triton.git#main
ARG SRC_PATH_JAX=/opt/jax
ARG SRC_PATH_JAX_TRITON=/opt/jax-triton
ARG SRC_PATH_TRITON=/opt/triton
ARG SRC_PATH_XLA=/opt/xla

FROM ${BASE_IMAGE} as base
# Triton setup.py downloads and installs CUDA binaries at specific versions
# hardcoded in the script itself:
# https://github.com/openxla/triton/blob/84f9d9de158fb866fac67970f0f5d323999d9db1/python/setup.py#L373-L393
# Tell Triton to use CUDA binaries from the host container instead. These should be set
# both during the build stage and in the final container.
ENV TRITON_PTXAS_PATH=/usr/local/cuda/bin/ptxas
ENV TRITON_CUOBJDUMP_PATH=/usr/local/cuda/bin/cuobjdump
ENV TRITON_NVDISASM_PATH=/usr/local/cuda/bin/nvdisasm
RUN [ -x "${TRITON_PTXAS_PATH}" ] && [ -x "${TRITON_CUOBJDUMP_PATH}" ] && [ -x "${TRITON_NVDISASM_PATH}" ]

###############################################################################
## Check out Triton source
###############################################################################
# Use XLA's Bazel configuration to get the relevant tag from the openxla/triton
# fork's llvm-head branch and apply XLA's extra patches to it
FROM ${BASE_IMAGE} as checkout
ARG SRC_PATH_JAX
ARG SRC_PATH_XLA
RUN <<"EOF" bash -ex
pushd "${SRC_PATH_XLA}"
BAZEL=$(find "${SRC_PATH_JAX}/build" -type f -executable -name 'bazel-*')
"${BAZEL}" --output_base=/opt/triton-checkout fetch @triton//:BUILD
EOF

###############################################################################
## Get (only) the Triton source from the checkout step
###############################################################################
FROM base as builder
ARG SRC_PATH_TRITON
ARG SRC_PATH_XLA
COPY --from=checkout /opt/triton-checkout/external/triton "${SRC_PATH_TRITON}"
RUN <<"EOF" bash -ex
mkdir -p "${SRC_PATH_TRITON}/dist"
sed -i -e 's|^add_subdirectory(unittest)|# unit tests disabled|' "${SRC_PATH_TRITON}/CMakeLists.txt"
sed -i -e 's|BackendInstaller.copy(\["nvidia", "amd"\])|BackendInstaller.copy(["nvidia"])|g' "${SRC_PATH_TRITON}/python/setup.py"
# Extra patches to Triton maintained in XLA. These are already applied in the checkout stage.
XLA_TRITON_PATCHES="${SRC_PATH_XLA}/third_party/triton"
# This patch only works with a newer LLVM than is pinned in the branch.
PATCH_FILE="${XLA_TRITON_PATCHES}/llvm_integration/cl623185214.patch"
if [[ $(cat "${SRC_PATH_TRITON}/cmake/llvm-hash.txt") == "6f44bb7717897191be25aa01161831c67cdf5b84" && -f "${PATCH_FILE}" ]]; then
  pushd "${SRC_PATH_TRITON}"
  patch -p1 -R < "${PATCH_FILE}"
  popd
fi
# This patch adds two files that are not known to CMake
if [[ -f "${XLA_TRITON_PATCHES}/xla_extensions/sparse_dot_base.patch" ]]; then
  sed -i -e '/ConvertLayoutOpToLLVM.cpp/a ConvertLayoutOpToLLVM/SharedToSparseDotOperand.cpp' "${SRC_PATH_TRITON}/third_party/nvidia/lib/TritonNVIDIAGPUToLLVM/CMakeLists.txt"
  sed -i -e '/DotOpToLLVM.cpp/a DotOpToLLVM/Sparse.cpp' "${SRC_PATH_TRITON}/third_party/nvidia/lib/TritonNVIDIAGPUToLLVM/CMakeLists.txt"
fi
# Use clang to match Google etc.
TRITON_BUILD_WITH_CLANG_LLD=1  pip wheel --verbose --wheel-dir="${SRC_PATH_TRITON}/dist" "${SRC_PATH_TRITON}/python"
EOF

# clean up the wheel build directory so it doesn't end up bloating the container
RUN rm -rf "${SRC_PATH_TRITON}/python/build"

###############################################################################
## Download source and add auxiliary scripts
###############################################################################
FROM base as mealkit
ARG URLREF_JAX_TRITON
ARG SRC_PATH_JAX_TRITON
ARG SRC_PATH_TRITON

# Get the triton source + wheel from the build step
COPY --from=builder ${SRC_PATH_TRITON} ${SRC_PATH_TRITON}
RUN echo "triton @ file://$(ls ${SRC_PATH_TRITON}/dist/triton-*.whl)" >> /opt/pip-tools.d/requirements-triton.in

# Check out jax-triton
RUN <<"EOF" bash -ex
git-clone.sh ${URLREF_JAX_TRITON} ${SRC_PATH_JAX_TRITON}
echo "-e file://${SRC_PATH_JAX_TRITON}" >> /opt/pip-tools.d/requirements-triton.in
sed -i 's|"jax @ [^"]\+"|"jax"|g;s|"triton-nightly @ [^"]\+"|"triton"|g' ${SRC_PATH_JAX_TRITON}/pyproject.toml
EOF

###############################################################################
## Install accumulated packages from the base image and the previous stage
###############################################################################
FROM mealkit as final

RUN pip-finalize.sh
