#!/usr/bin/env python
import argparse
from collections import defaultdict
import copy
import os
import pathlib
import shutil
import zipfile

parser = argparse.ArgumentParser(
    description=(
        "`nsys-jax-combine` facilitates distributed profiling of JAX applications "
        "using the `nsys-jax` wrapper. It aggregates multiple .zip outputs from "
        "different `nsys-jax` processes that profiled the same distributed execution "
        "of an application, checking consistency and removing duplicated data."
    ),
)
parser.add_argument(
    "-f",
    "--force-overwrite",
    action="store_true",
    help="Overwrite the output file if it exists.",
)
parser.add_argument(
    "input",
    type=pathlib.Path,
    nargs="+",
    help="Input .zip archives produced by `nsys-jax`",
)


def check_keep_nsys_rep(raw):
    assert raw in {"all", "first", "none"}
    return raw


parser.add_argument(
    "--keep-nsys-rep",
    default="first",
    type=check_keep_nsys_rep,
    help=(
        "How many .nsys-rep files from the input to copy to the output. Supported "
        "values are 'all', 'first' and 'none'."
    ),
)
parser.add_argument(
    "-o",
    "--output",
    help="Output file name",
    required=True,
    type=pathlib.Path,
)
# TODO: derive a default output path from the input paths
args = parser.parse_args()
if args.output.suffix != ".zip":
    args.output = args.output.with_suffix(".zip")
if os.path.exists(args.output) and not args.force_overwrite:
    raise Exception(
        f"Output path {args.output} already exists and -f/--force-overwrite was not passed"
    )

hashes = defaultdict(set)
for input in args.input:
    with zipfile.ZipFile(input) as ifile:
        for member in ifile.infolist():
            hashes[member.filename].add(member.CRC)

with zipfile.ZipFile(args.output, "w") as ofile:
    for n_input, input in enumerate(args.input):
        first_input = n_input == 0
        keep_this_nsys_rep = args.keep_nsys_rep == "all" or (
            args.keep_nsys_rep == "first" and first_input
        )
        with zipfile.ZipFile(input) as ifile:
            for member in ifile.infolist():
                if member.is_dir():
                    continue
                filename = member.filename
                assert filename in hashes
                seen_hashes = hashes[filename]

                def write(dst_info):
                    assert dst_info.filename not in set(ofile.namelist())
                    with ifile.open(member) as src, ofile.open(dst_info, "w") as dst:
                        shutil.copyfileobj(src, dst)

                if filename.endswith(".nsys-rep"):
                    assert len(seen_hashes) == 1
                    if filename == input.stem + ".nsys-rep" and keep_this_nsys_rep:
                        # `filename`` is the .nsys-rep from `input``
                        write(member)
                else:
                    if len(seen_hashes) == 1:
                        # This file was the same in all inputs: copy it once.
                        if first_input:
                            write(member)
                    else:
                        # This file was not the same in all inputs: copy it to a
                        # modified destination. An input file A/B in reportN.zip will
                        # be saved as A/B/reportN in the output, i.e. A/B will be a
                        # directory instead of a file. TODO: in future instead of using
                        # input.stem use a standardised format showing the device
                        # numbers that were profiled in reportN.zip.
                        dst_info = copy.copy(member)
                        dst_info.filename = filename + "/" + input.stem
                        write(dst_info)
