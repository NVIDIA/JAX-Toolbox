# syntax=docker/dockerfile:1-labs

ARG BASE_IMAGE=ghcr.io/nvidia/jax:mealkit
ARG GIT_URLREF_PAXML  # if not set, will use defaults from the manifest file
ARG GIT_URLREF_PRAXIS
ARG GIT_URLREF_TFTEXT
ARG GIT_URLREF_LINGVO
ARG SRC_PATH_PAXML=/opt/paxml
ARG SRC_PATH_PRAXIS=/opt/praxis
ARG SRC_PATH_TFTEXT=/opt/tensorflow-text
ARG SRC_PATH_LINGVO=/opt/lingvo

###############################################################################
## build tensorflow-text and lingvo, which do not have working arm64 pip wheels
###############################################################################

ARG BASE_IMAGE
FROM ${BASE_IMAGE} as wheel-builder

# tensorflow-text and lingvo build needs bazel
RUN wget https://github.com/bazelbuild/bazelisk/releases/download/v1.17.0/bazelisk-linux-arm64 -O /usr/bin/bazel && \
    chmod a+x /usr/bin/bazel

#------------------------------------------------------------------------------
# build tensorflow-text 2.13.0 from source
#------------------------------------------------------------------------------

FROM wheel-builder as tftext-builder
ARG GIT_URLREF_TFTEXT
ARG SRC_PATH_TFTEXT
RUN <<"EOF" bash -exu -o pipefail
pip install tensorflow_datasets==4.9.2 auditwheel tensorflow==2.13.0
DEFAULT_GIT_URLREF_TFTEXT=$(yq '.tensorflow-text | [(.url, .latest_verified_commit)] | join("#")' ${MANIFEST_FILE})
get-source.sh -c ${SRC_PATH_TFTEXT} -u ${GIT_URLREF_TFTEXT:-$DEFAULT_GIT_URLREF_TFTEXT}
cd ${SRC_PATH_TFTEXT}
./oss_scripts/run_build.sh
EOF

#------------------------------------------------------------------------------
# build lingvo
#------------------------------------------------------------------------------

FROM wheel-builder as lingvo-builder
ARG GIT_URLREF_LINGVO
ARG SRC_PATH_TFTEXT
ARG SRC_PATH_LINGVO

COPY --from=tftext-builder ${SRC_PATH_TFTEXT}/tensorflow_text*.whl /opt/

# get lingvo source
RUN <<"EOF" bash -exu -o pipefail
DEFAULT_GIT_URLREF_LINGVO=$(yq '.lingvo | [(.url, .latest_verified_commit)] | join("#")' ${MANIFEST_FILE})
get-source.sh -c ${SRC_PATH_LINGVO} -u ${GIT_URLREF_LINGVO:-$DEFAULT_GIT_URLREF_LINGVO}
EOF

# build lingvo
RUN <<"EOF" bash -exu -o pipefail
pushd ${SRC_PATH_LINGVO}

# Use aarch distribution of protobufs
patch -p1 <<"EOFINNER"
diff --git a/lingvo/repo.bzl b/lingvo/repo.bzl
index ce65822d2..d9c0277aa 100644
--- a/lingvo/repo.bzl
+++ b/lingvo/repo.bzl
@@ -232,9 +232,9 @@ filegroup(
 )
 """,
         urls = [
-            "https://github.com/protocolbuffers/protobuf/releases/download/v21.9/protoc-21.9-linux-x86_64.zip",
+            "https://github.com/protocolbuffers/protobuf/releases/download/v21.9/protoc-21.9-linux-aarch_64.zip",
         ],
-        sha256 = "3cd951aff8ce713b94cde55e12378f505f2b89d47bf080508cf77e3934f680b6",
+        sha256 = "a584286dfa8ebb17032ece206ed74d5e9931e2edb9016e427be2a0dab3b21071",
     )

 def icu():
EOFINNER

pip install tensorflow_datasets==4.9.2 auditwheel tensorflow==2.13.0 /opt/tensorflow_text*.whl
sed -i 's/tensorflow=/#tensorflow=/'  docker/dev.requirements.txt
sed -i 's/tensorflow-text=/#tensorflow-text=/'  docker/dev.requirements.txt
sed -i 's/dataclasses=/#dataclasses=/'  docker/dev.requirements.txt
pip install -r docker/dev.requirements.txt

# Some tests are flaky right now, so we skip running the tests.
SKIP_TESTS=1 PYTHON_MINOR_VERSION=$(python --version | cut -d ' ' -f 2 | cut -d '.' -f 2) pip_package/build.sh
EOF

###############################################################################
## Pax for AArch64
###############################################################################

ARG BASE_IMAGE
FROM ${BASE_IMAGE} as mealkit
ARG GIT_URLREF_PAXML
ARG GIT_URLREF_PRAXIS
ARG SRC_PATH_PAXML
ARG SRC_PATH_PRAXIS
ARG SRC_PATH_TFTEXT

COPY --from=lingvo-builder /tmp/lingvo/dist/lingvo*linux_aarch64.whl /opt/
RUN echo "lingvo @ file://$(ls /opt/lingvo*.whl)" >> /opt/pip-tools.d/requirements-paxml.in

COPY --from=tftext-builder ${SRC_PATH_TFTEXT}/tensorflow_text*.whl /opt/
RUN echo "tensorflow-text @ file://$(ls /opt/tensorflow_text*.whl)" >> /opt/pip-tools.d/requirements-paxml.in

# obtain paxml and praxis source
RUN <<"EOF" bash -exu -o pipefail
DEFAULT_GIT_URLREF_PAXML=$(yq '.paxml | [(.url, .latest_verified_commit)] | join("#")' ${MANIFEST_FILE})
DEFAULT_GIT_URLREF_PRAXIS=$(yq '.praxis | [(.url, .latest_verified_commit)] | join("#")' ${MANIFEST_FILE})
get-source.sh -c ${SRC_PATH_PAXML} -u ${GIT_URLREF_PAXML:-$DEFAULT_GIT_URLREF_PAXML} -p /opt/pip-tools.d/requirements-paxml.in
get-source.sh -c ${SRC_PATH_PRAXIS} -u ${GIT_URLREF_PRAXIS:-$DEFAULT_GIT_URLREF_PRAXIS} -p /opt/pip-tools.d/requirements-paxml.in
sed -i "s|${SRC_PATH_PAXML}|${SRC_PATH_PAXML}[gpu]|g" /opt/pip-tools.d/requirements-paxml.in
EOF

# remove dep references to packages already shipped in the container
# modify dependencies due to arm64 wheel availability
RUN <<"EOF" bash -ex
echo "tensorflow==2.13.0" >> /opt/pip-tools.d/requirements-paxml.in
echo "tensorflow_datasets==4.9.2" >> /opt/pip-tools.d/requirements-paxml.in
echo "chex==0.1.7" >> /opt/pip-tools.d/requirements-paxml.in
echo "auditwheel" >> /opt/pip-tools.d/requirements-paxml.in

for src in ${SRC_PATH_PAXML} ${SRC_PATH_PRAXIS}; do
  pushd ${src}

  for pattern in \
    "s| @ git+https://github.com/google/flax||g" \
    "s| @ git+https://github.com/google/jax||g" \
    "s|^tensorflow|#tensorflow|" \
    "s|^lingvo|#lingvo|" \
    "s|^scikit-learn|#scikit-learn|" \
    "s|^t5|#t5|" \
    "s|^protobuf|#protobuf|" \
    "s|^numpy|#numpy|" \
  ; do
    sed -i "${pattern}" */pip_package/requirements.txt requirements.in
  done

  if git diff --quiet; then
      echo "broken dependencies no longer present in ${src}"
      exit 1
  else
      git config --global user.name "JAX Toolbox"
      git config --global user.email "jax@nvidia.com"
      git commit -a -m "remove broken dependencies from ${src}"
      rm ~/.gitconfig
  fi
  popd
done
EOF

ADD test-pax.sh /usr/local/bin

###############################################################################
## Install accumulated packages from the base image and the previous stage
###############################################################################

FROM mealkit as final

RUN pip-finalize.sh
