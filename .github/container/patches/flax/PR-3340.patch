From ea808213a1b808e3732797f26bb9e3e8c8a02c2d Mon Sep 17 00:00:00 2001
From: ashors1 <ashors@nvidia.com>
Date: Fri, 2 Jun 2023 15:01:21 -0700
Subject: [PATCH 1/3] add t5x sharding annotations to flax layers

---
 flax/linen/attention.py     | 33 ++++++++++++++++++++++-------
 flax/linen/linear.py        | 41 ++++++++++++++++++++++++++++---------
 flax/linen/normalization.py | 25 ++++++++++++++++++----
 3 files changed, 78 insertions(+), 21 deletions(-)

diff --git a/flax/linen/attention.py b/flax/linen/attention.py
index 7b7af16e..a264b027 100644
--- a/flax/linen/attention.py
+++ b/flax/linen/attention.py
@@ -30,6 +30,7 @@ from flax.linen.linear import (
 )
 from flax.linen.module import Module, compact, merge_param
 from flax.linen.normalization import LayerNorm
+from flax.linen.partitioning import variable_with_axes
 from flax.typing import (
   Array,
   PRNGKey,
@@ -40,7 +41,6 @@ from flax.typing import (
   DotGeneralT,
 )
 
-
 def dot_product_attention_weights(
   query: Array,
   key: Array,
@@ -288,6 +288,16 @@ class MultiHeadDotProductAttention(Module):
       num_heads, value_channels]``
     decode: Whether to prepare and use an autoregressive cache.
     normalize_qk: Should QK normalization be applied (arxiv.org/abs/2302.05442).
+    in_proj_kernel_axes: a tuple of axes over which to shard the kernel for
+      the attention in-projection.
+    in_proj_bias_axes: a tuple of axis names associated with the bias for
+      the attention in-projection.
+    out_proj_kernel_axes: a tuple of axis names associated with the kernel for
+      the attention out-projection.
+    out_proj_bias_axes: a tuple of axis names associated with the bias for
+      the attention out-projection.
+    decode_axes: a tuple of axis names associated with auroregressive cache.
+      Only used when decode=True.
   """
 
   num_heads: int
@@ -310,6 +320,11 @@ class MultiHeadDotProductAttention(Module):
   out_dot_general: Optional[DotGeneralT] = None
   qkv_dot_general_cls: Any = None
   out_dot_general_cls: Any = None
+  in_proj_kernel_axes: Tuple[str, ...] = None
+  in_proj_bias_axes: Tuple[str, ...] = None
+  out_proj_kernel_axes: Tuple[str, ...] = None
+  out_proj_bias_axes: Tuple[str, ...] = None
+  decode_axes: Tuple[str, ...] = None
 
   @overload
   def __call__(
@@ -448,6 +463,8 @@ class MultiHeadDotProductAttention(Module):
       precision=self.precision,
       dot_general=self.qkv_dot_general,
       dot_general_cls=self.qkv_dot_general_cls,
+      kernel_axes=self.in_proj_kernel_axes,
+      bias_axes=self.in_proj_bias_axes,
     )
     # project inputs_q to multi-headed q/k/v
     # dimensions are then [batch..., length, n_heads, n_features_per_head]
@@ -478,14 +495,14 @@ class MultiHeadDotProductAttention(Module):
     if self.decode:
       # detect if we're initializing by absence of existing cache data.
       is_initialized = self.has_variable('cache', 'cached_key')
-      cached_key = self.variable(
-        'cache', 'cached_key', jnp.zeros, key.shape, key.dtype
+      cached_key = variable_with_axes('cache', 'cached_key',
+        jnp.zeros, key.shape, key.dtype, axes=self.decode_axes
       )
-      cached_value = self.variable(
-        'cache', 'cached_value', jnp.zeros, value.shape, value.dtype
+      cached_value = variable_with_axes('cache', 'cached_value',
+        jnp.zeros, value.shape, value.dtype, axes=self.decode_axes
       )
-      cache_index = self.variable(
-        'cache', 'cache_index', lambda: jnp.array(0, dtype=jnp.int32)
+      cache_index = variable_with_axes('cache', 'cache_index',
+        lambda: jnp.array(0, dtype=jnp.int32), axes=None
       )
       if is_initialized:
         (
@@ -581,6 +598,8 @@ class MultiHeadDotProductAttention(Module):
       dot_general=self.out_dot_general,
       dot_general_cls=self.out_dot_general_cls,
       name='out',  # type: ignore[call-arg]
+      kernel_axes=self.out_proj_kernel_axes,
+      bias_axes=self.out_proj_bias_axes,
     )(x)
     return out
 
diff --git a/flax/linen/linear.py b/flax/linen/linear.py
index 935cfac8..9828dff9 100644
--- a/flax/linen/linear.py
+++ b/flax/linen/linear.py
@@ -38,6 +38,7 @@ from flax.linen import initializers
 from flax.linen.dtypes import promote_dtype
 from flax.linen import module
 from flax.linen.module import Module, compact
+from flax.linen.partitioning import param_with_axes
 from flax.typing import (
   Array,
   PRNGKey as PRNGKey,
@@ -100,6 +101,8 @@ class DenseGeneral(Module):
     bias_init: initializer function for the bias.
     precision: numerical precision of the computation see ``jax.lax.Precision``
       for details.
+    kernel_axes: a tuple of axes associated with the kernel.
+    bias_axes: a tuple of axes associated with the bias.
   """
 
   features: Union[int, Sequence[int]]
@@ -114,6 +117,8 @@ class DenseGeneral(Module):
   # Deprecated. Will be removed.
   dot_general: Optional[DotGeneralT] = None
   dot_general_cls: Any = None
+  kernel_axes: Tuple[str, ...] = None
+  bias_axes: Tuple[str, ...] = None
 
   @compact
   def __call__(self, inputs: Array) -> Array:
@@ -162,8 +167,9 @@ class DenseGeneral(Module):
       if ax not in axis
     )
     kernel_shape = tuple(inputs.shape[ax] for ax in axis) + features
-    kernel = self.param(
-      'kernel', kernel_init_wrap, batch_shape + kernel_shape, self.param_dtype
+    kernel = param_with_axes(
+      'kernel', kernel_init_wrap, batch_shape + kernel_shape,
+      self.param_dtype, axes=self.kernel_axes
     )
 
     batch_ind = tuple(range(n_batch_dims))
@@ -181,9 +187,11 @@ class DenseGeneral(Module):
           return meta.replace_boxed(bias, jnp.reshape(bias.unbox(), shape))
         return jnp.reshape(bias, shape)
 
-      bias = self.param(
-        'bias', bias_init_wrap, batch_shape + features, self.param_dtype
+      bias = param_with_axes(
+        'bias', bias_init_wrap, batch_shape + features,
+        self.param_dtype, axes=self.bias_axes
       )
+
     else:
       bias = None
 
@@ -231,6 +239,8 @@ class Dense(Module):
       for details.
     kernel_init: initializer function for the weight matrix.
     bias_init: initializer function for the bias.
+    kernel_axes: a tuple of axes associated with the kernel.
+    bias_axes: a tuple of axes associated with the bias.
   """
 
   features: int
@@ -243,6 +253,8 @@ class Dense(Module):
   # Deprecated. Will be removed.
   dot_general: Optional[DotGeneralT] = None
   dot_general_cls: Any = None
+  kernel_axes: Tuple[str, ...] = None
+  bias_axes: Tuple[str, ...] = None
 
   @compact
   def __call__(self, inputs: Array) -> Array:
@@ -254,15 +266,18 @@ class Dense(Module):
     Returns:
       The transformed input.
     """
-    kernel = self.param(
+    kernel = param_with_axes(
       'kernel',
       self.kernel_init,
       (jnp.shape(inputs)[-1], self.features),
       self.param_dtype,
+      axes=self.kernel_axes
     )
     if self.use_bias:
-      bias = self.param(
-        'bias', self.bias_init, (self.features,), self.param_dtype
+      bias = param_with_axes(
+        'bias', self.bias_init, (self.features,),
+        self.param_dtype,
+        axes=self.bias_axes
       )
     else:
       bias = None
@@ -475,6 +490,8 @@ class _Conv(Module):
       for details.
     kernel_init: initializer for the convolutional kernel.
     bias_init: initializer for the bias.
+    kernel_axes: a tuple of axes associated with the kernel.
+    bias_axes: a tuple of axes associated with the bias.
   """
 
   features: int
@@ -494,6 +511,8 @@ class _Conv(Module):
   # Deprecated. Will be removed.
   conv_general_dilated: Optional[ConvGeneralDilatedT] = None
   conv_general_dilated_cls: Any = None
+  kernel_axes: Tuple[str, ...] = None
+  bias_axes: Tuple[str, ...] = None
 
   @property
   def shared_weights(self) -> bool:  # type: ignore
@@ -635,8 +654,10 @@ class _Conv(Module):
         f'Shapes are: {self.mask.shape}, {kernel_shape}'
       )
 
-    kernel = self.param(
-      'kernel', self.kernel_init, kernel_shape, self.param_dtype
+    kernel = param_with_axes(
+      'kernel', self.kernel_init, kernel_shape,
+      self.param_dtype,
+      axes=self.kernel_axes
     )
 
     if self.mask is not None:
@@ -650,7 +671,7 @@ class _Conv(Module):
         # One bias weight per output entry, unshared betwen pixels.
         bias_shape = conv_output_shape[1:]
 
-      bias = self.param('bias', self.bias_init, bias_shape, self.param_dtype)
+      bias = param_with_axes('bias', self.bias_init, bias_shape, self.param_dtype, axes=self.bias_axes)
     else:
       bias = None
 
diff --git a/flax/linen/normalization.py b/flax/linen/normalization.py
index b6bd992f..230d2fe3 100644
--- a/flax/linen/normalization.py
+++ b/flax/linen/normalization.py
@@ -24,6 +24,7 @@ from jax import lax
 from jax.nn import initializers
 
 from flax.linen import dtypes, module, transforms
+from flax.linen.partitioning import param_with_axes
 from flax.typing import (
   Array,
   PRNGKey as PRNGKey,
@@ -154,6 +155,7 @@ def _normalize(
   use_scale: bool,
   bias_init: Initializer,
   scale_init: Initializer,
+  axes: Tuple[str, ...] = None,
 ):
   """Normalizes the input of a normalization layer and optionally applies a learned scale and bias.
 
@@ -173,6 +175,7 @@ def _normalize(
     use_scale: If true, scale the output.
     bias_init: Initialization function for the bias term.
     scale_init: Initialization function for the scaling function.
+    axes: A tuple of axis names over which to shard parameters.
 
   Returns:
     The normalized input.
@@ -191,15 +194,17 @@ def _normalize(
   mul = lax.rsqrt(var + epsilon)
   args = [x]
   if use_scale:
-    scale = mdl.param(
-      'scale', scale_init, reduced_feature_shape, param_dtype
+    scale = param_with_axes(
+      'scale', scale_init, reduced_feature_shape,
+      param_dtype, axes=axes, module=mdl
     ).reshape(feature_shape)
     mul *= scale
     args.append(scale)
   y *= mul
   if use_bias:
-    bias = mdl.param(
-      'bias', bias_init, reduced_feature_shape, param_dtype
+    bias = param_with_axes(
+      'bias', bias_init, reduced_feature_shape,
+      param_dtype, axes=axes, module=mdl
     ).reshape(feature_shape)
     y += bias
     args.append(bias)
@@ -284,6 +289,7 @@ class BatchNorm(Module):
       more details.
     use_fast_variance: If true, use a faster, but less numerically stable,
       calculation for the variance.
+    pjit_axis_names: A tuple of axis names.
   """
 
   use_running_average: Optional[bool] = None
@@ -299,6 +305,7 @@ class BatchNorm(Module):
   axis_name: Optional[str] = None
   axis_index_groups: Any = None
   use_fast_variance: bool = True
+  pjit_axis_name: Tuple[str, ...] = None
 
   @compact
   def __call__(
@@ -378,6 +385,7 @@ class BatchNorm(Module):
       self.use_scale,
       self.bias_init,
       self.scale_init,
+      self.pjit_axis_name,
     )
 
 
@@ -441,6 +449,7 @@ class LayerNorm(Module):
       more details.
     use_fast_variance: If true, use a faster, but less numerically stable,
       calculation for the variance.
+    pjit_axis_names: A tuple of axis names.
   """
 
   epsilon: float = 1e-6
@@ -455,6 +464,7 @@ class LayerNorm(Module):
   axis_name: Optional[str] = None
   axis_index_groups: Any = None
   use_fast_variance: bool = True
+  pjit_axis_name: Tuple[str, ...] = None
 
   @compact
   def __call__(self, x, *, mask: Optional[jax.Array] = None):
@@ -492,6 +502,7 @@ class LayerNorm(Module):
       self.use_scale,
       self.bias_init,
       self.scale_init,
+      self.pjit_axis_name,
     )
 
 
@@ -540,6 +551,7 @@ class RMSNorm(Module):
       more details.
     use_fast_variance: If true, use a faster, but less numerically stable,
       calculation for the variance.
+    pjit_axis_names: A tuple of axis names.
   """
 
   epsilon: float = 1e-6
@@ -552,6 +564,7 @@ class RMSNorm(Module):
   axis_name: Optional[str] = None
   axis_index_groups: Any = None
   use_fast_variance: bool = True
+  pjit_axis_name: Tuple[str, ...] = None
 
   @compact
   def __call__(self, x, *, mask: Optional[jax.Array] = None):
@@ -590,6 +603,7 @@ class RMSNorm(Module):
       self.use_scale,
       initializers.zeros,
       self.scale_init,
+      self.pjit_axis_name,
     )
 
 
@@ -660,6 +674,7 @@ class GroupNorm(Module):
       more details.
     use_fast_variance: If true, use a faster, but less numerically stable,
       calculation for the variance.
+    pjit_axis_names: A tuple of axis names.
   """
 
   num_groups: Optional[int] = 32
@@ -675,6 +690,7 @@ class GroupNorm(Module):
   axis_name: Optional[str] = None
   axis_index_groups: Any = None
   use_fast_variance: bool = True
+  pjit_axis_name: Tuple[str, ...] = None
 
   @compact
   def __call__(self, x, *, mask: Optional[jax.Array] = None):
@@ -889,6 +905,7 @@ class InstanceNorm(Module):
       self.use_scale,
       self.bias_init,
       self.scale_init,
+      self.pjit_axis_name,
     )
 
 
-- 
2.43.2


From b5451a97687bee097472d296d3e095532059fa98 Mon Sep 17 00:00:00 2001
From: Terry Kong <terrycurtiskong@gmail.com>
Date: Mon, 2 Oct 2023 16:10:05 -0700
Subject: [PATCH 2/3] Added ConvTranspose sharding annotations (#3)

Co-authored-by: sahilj <sahilj@nvidia.com>
---
 flax/linen/linear.py | 24 ++++++++++++++++++++----
 1 file changed, 20 insertions(+), 4 deletions(-)

diff --git a/flax/linen/linear.py b/flax/linen/linear.py
index 9828dff9..45c0549b 100644
--- a/flax/linen/linear.py
+++ b/flax/linen/linear.py
@@ -923,6 +923,21 @@ class ConvTranspose(Module):
   bias_init: Initializer = initializers.zeros_init()
   transpose_kernel: bool = False
 
+  def param_with_axes(
+    self,
+    name: str,
+    init_fn,
+    *init_args,
+    axes: Optional[Tuple[str, ...]] = None,
+    module: Optional[Module] = None):
+    return param_with_axes(
+      name,
+      init_fn,
+      *init_args,
+      axes=axes,
+      module=module,
+    )
+
   @compact
   def __call__(self, inputs: Array) -> Array:
     """Applies a transposed convolution to the inputs.
@@ -987,8 +1002,9 @@ class ConvTranspose(Module):
         f'Shapes are: {self.mask.shape}, {kernel_shape}'
       )
 
-    kernel = self.param(
-      'kernel', self.kernel_init, kernel_shape, self.param_dtype
+    kernel = self.param_with_axes(
+      'kernel', self.kernel_init, kernel_shape, self.param_dtype,
+      axes=('height', 'width', 'input', 'embed')
     )
 
     if self.mask is not None:
@@ -999,8 +1015,8 @@ class ConvTranspose(Module):
       padding_lax = 'VALID'
 
     if self.use_bias:
-      bias = self.param(
-        'bias', self.bias_init, (self.features,), self.param_dtype
+      bias = self.param_with_axes(
+        'bias', self.bias_init, (self.features,), self.param_dtype, axes=('embed', )
       )
     else:
       bias = None
-- 
2.43.2


From 7fae8293d850a8f15338eb3d03d8cb844d6847ba Mon Sep 17 00:00:00 2001
From: ashors1 <ashors@nvidia.com>
Date: Thu, 1 Feb 2024 09:54:25 -0800
Subject: [PATCH 3/3] Add missing import

---
 flax/linen/attention.py     | 1 +
 flax/linen/linear.py        | 1 +
 flax/linen/normalization.py | 1 +
 3 files changed, 3 insertions(+)

diff --git a/flax/linen/attention.py b/flax/linen/attention.py
index a264b027..1d07fd4e 100644
--- a/flax/linen/attention.py
+++ b/flax/linen/attention.py
@@ -39,6 +39,7 @@ from flax.typing import (
   Initializer,
   PrecisionLike,
   DotGeneralT,
+  Tuple,
 )
 
 def dot_product_attention_weights(
diff --git a/flax/linen/linear.py b/flax/linen/linear.py
index 45c0549b..bf13be96 100644
--- a/flax/linen/linear.py
+++ b/flax/linen/linear.py
@@ -50,6 +50,7 @@ from flax.typing import (
   ConvGeneralDilatedT,
   PaddingLike,
   LaxPadding,
+  Tuple,
 )
 
 
diff --git a/flax/linen/normalization.py b/flax/linen/normalization.py
index 230d2fe3..634c9616 100644
--- a/flax/linen/normalization.py
+++ b/flax/linen/normalization.py
@@ -32,6 +32,7 @@ from flax.typing import (
   Shape as Shape,
   Initializer,
   Axes,
+  Tuple,
 )
 
 field = dataclasses.field
-- 
2.43.2

