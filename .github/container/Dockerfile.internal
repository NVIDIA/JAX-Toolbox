# syntax=docker/dockerfile:1-labs
ARG BASE_IMAGE
ARG GIT_USER_NAME="JAX Toolbox"
ARG GIT_USER_EMAIL=jax@nvidia.com
ARG SRC_MANIFEST_FILE=manifest.yaml
ARG DEST_MANIFEST_DIR=/opt/manifest.d
ARG CLANG_VERSION=17

###############################################################################
## Build base image
###############################################################################

FROM ${BASE_IMAGE} as base
ARG GIT_USER_EMAIL
ARG GIT_USER_NAME
ARG SRC_MANIFEST_FILE
ARG DEST_MANIFEST_DIR
ARG CLANG_VERSION

ENV JAX_RELEASE=1

###############################################################################
## Install Python and essential tools
###############################################################################

RUN <<"EOF" bash -ex
export DEBIAN_FRONTEND=noninteractive
export TZ=America/Los_Angeles
apt-get update

apt_packages=(
  # generic
  bat
  build-essential
  checkinstall
  cmake
  curl
  git
  gnupg
  liblzma-dev
  python-is-python3
  python3-pip
  rsync
  vim
  wget
  jq
  # llvm.sh
  lsb-release software-properties-common
  # GCP autoconfig
  pciutils hwloc bind9-host
)
if [[ $(dpkg --print-architecture) == arm64 ]]; then
  # h5py: The newest release of of h5py (3.11.0) does not include ARM wheels and causes pip to build h5py.
  #       These installs ensure that 3.11.0, or any future version missing ARM, can be built.
  #       Related: https://github.com/h5py/h5py/issues/2408
  apt_packages+=(pkg-config libhdf5-dev)
fi
apt-get install -y ${apt_packages[@]}

apt-get upgrade -y --allow-change-held-packages libnccl2 libnccl-dev

# Install LLVM/Clang
bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)" -- ${CLANG_VERSION}
apt-get remove -y software-properties-common lsb-release
apt-get autoremove -y  # removes python3-blinker which conflicts with pip-compile in JAX

# Make sure that clang and clang++ point to the new version. This list is based
# on the symlinks installed by the `clang` (as opposed to `clang-14`) and `lld`
# (as opposed to `lld-14`) packages available in Ubuntu 22.04. 100 is an
# arbitrary priority.
update-alternatives --verbose \
  --install /usr/bin/clang          clang          /usr/lib/llvm-${CLANG_VERSION}/bin/clang 100 \
  --slave   /usr/bin/asan_symbolize asan_symbolize /usr/bin/asan_symbolize-${CLANG_VERSION} \
  --slave   /usr/bin/clang++        clang++        /usr/lib/llvm-${CLANG_VERSION}/bin/clang++ \
  --slave   /usr/bin/ld.lld         ld.lld         /usr/lib/llvm-${CLANG_VERSION}/bin/lld \
  --slave   /usr/bin/lld            lld            /usr/lib/llvm-${CLANG_VERSION}/bin/lld \
  --slave   /usr/bin/lld-link       lld-link       /usr/lib/llvm-${CLANG_VERSION}/bin/lld \
  --slave   /usr/bin/wasm-ld        wasm-ld        /usr/lib/llvm-${CLANG_VERSION}/bin/lld

# Make sure that any later attempt to install `clang` or `lld` will fail.
cat >/etc/apt/preferences.d/no-unversioned-clang-lld <<EOL
# LLVM is installed from apt.llvm.org using versioned packages, whereas the
# unversioned clang and lld packages come from Ubuntu and refer to older
# versions of LLVM. Please use versioned packages in this container.
Package: clang
Pin: release *
Pin-Priority: -1

Package: lld
Pin: release *
Pin-Priority: -1
EOL

apt-get clean
rm -rf /var/lib/apt/lists/*
EOF

RUN <<"EOF" bash -ex
git config --global user.name "${GIT_USER_NAME}"
git config --global user.email "${GIT_USER_EMAIL}"
EOF
RUN mkdir -p /opt/pip-tools.d
ADD --chmod=777 \
    get-source.sh \
    pip-finalize.sh \
    /usr/local/bin/
RUN wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_$(dpkg --print-architecture) -O /usr/local/bin/yq && \
    chmod 777 /usr/local/bin/yq
RUN git clone -b 23.3.1 https://github.com/pypa/pip.git /opt/pip
# Patch is specific to 23.3.1
# Generated via: "git diff > pip-vcs-equivalency.patch"
ADD pip-vcs-equivalency.patch /opt/pip/
RUN <<EOF bash -e -x
cd /opt/pip
git apply </opt/pip/pip-vcs-equivalency.patch
git add -u
git commit -m 'Adds JAX_TOOLBOX_VCS_EQUIVALENCY as a trigger to treat all github VCS installs for a package as equivalent. The spec of the last encountered version will be used'
EOF
RUN pip install --upgrade --no-cache-dir -e /opt/pip pip-tools && rm -rf ~/.cache/*

###############################################################################
## RoCE and InfiniteBand support
###############################################################################

ADD install-ofed.sh /usr/local/bin
RUN install-ofed.sh

###############################################################################
## Add the systemcheck to the entrypoint.
###############################################################################

COPY check-shm.sh /opt/nvidia/entrypoint.d/

###############################################################################
## Copy manifest file to the container
###############################################################################

# Set the manifest env vars
ENV MANIFEST_FILE=${DEST_MANIFEST_DIR}/${SRC_MANIFEST_FILE}
# Copy all required files for manifestation
ADD ${SRC_MANIFEST_FILE} \
    bump.sh \
    bump-openxla-triton.sh \
    create-distribution.sh \
    ${DEST_MANIFEST_DIR}/
COPY patches/ ${DEST_MANIFEST_DIR}/patches/


ARG SRC_PATH_JAX=/opt/jax
ARG SRC_PATH_XLA=/opt/xla
ARG SRC_PATH_FLAX=/opt/flax
ARG SRC_PATH_TE=/opt/transformer-engine
ARG GIT_USER_NAME="JAX Toolbox"
ARG GIT_USER_EMAIL=jax@nvidia.com

ARG BAZEL_CACHE=/tmp
ARG BUILD_DATE

###############################################################################
## Build JAX
###############################################################################

FROM base as builder
ARG SRC_PATH_JAX
ARG SRC_PATH_XLA
ARG BAZEL_CACHE
ARG GIT_USER_NAME
ARG GIT_USER_EMAIL
ARG PR730

RUN get-source.sh -l jax -m ${MANIFEST_FILE}
RUN --mount=type=ssh \
    --mount=type=secret,id=SSH_KNOWN_HOSTS,target=/root/.ssh/known_hosts \
    get-source.sh -l xla -m ${MANIFEST_FILE}

## apply release-specific patches
RUN <<"EOF" bash -ex
pushd ${SRC_PATH_JAX}
# https://github.com/google/jax/pull/20588
git cherry-pick -m 1 033992867fc8a9f76f4294bb770da936b0d068b2
popd

# revert https://github.com/openxla/xla/pull/9778 which is causing a flash attention issue for paxml
if ${PR730}; then
  pushd ${SRC_PATH_XLA}
  git remote add fork https://github.com/nvjax-svc-0/xla.git
  git fetch fork
  git cherry-pick -m 1 2ce31bb7a56b7af77d40ba8bafe99e901a4fc5fb
  popd
fi
EOF
## end of apply release-specific patches

ADD build-jax.sh local_cuda_arch test-jax.sh /usr/local/bin/
# TODO: move this patch into the manifest
ADD xla-arm64-neon.patch /opt
RUN build-jax.sh \
    --bazel-cache ${BAZEL_CACHE} \
    --src-path-jax ${SRC_PATH_JAX} \
    --src-path-xla ${SRC_PATH_XLA} \
    --sm all \
    --xla-arm64-patch /opt/xla-arm64-neon.patch \ 
    --clean

###############################################################################
## Pack jaxlib wheel and various source dirs into a pre-installation image
###############################################################################

FROM base as mealkit
ARG SRC_PATH_JAX
ARG SRC_PATH_XLA
ARG SRC_PATH_TE
ARG BUILD_DATE
ARG PR728

ENV BUILD_DATE=${BUILD_DATE}
# The following environment variables tune performance
ENV XLA_FLAGS=""
ENV XLA_FLAGS="${XLA_FLAGS} --xla_gpu_enable_latency_hiding_scheduler=true"
ENV XLA_FLAGS="${XLA_FLAGS} --xla_gpu_enable_async_all_gather=true"
ENV XLA_FLAGS="${XLA_FLAGS} --xla_gpu_enable_async_reduce_scatter=true"
ENV XLA_FLAGS="${XLA_FLAGS} --xla_gpu_enable_triton_gemm=false"
ENV CUDA_DEVICE_MAX_CONNECTIONS=1
ENV NCCL_NVLS_ENABLE=0
ENV CUDA_MODULE_LOADING=EAGER


COPY --from=builder ${SRC_PATH_JAX} ${SRC_PATH_JAX}
COPY --from=builder ${SRC_PATH_XLA} ${SRC_PATH_XLA}
ADD build-jax.sh local_cuda_arch test-jax.sh /usr/local/bin/

RUN mkdir -p /opt/pip-tools.d
RUN <<"EOF" bash -ex
# Encourage a newer numpy so that pip's dependency resolver will allow newer
# versions of other packages that rely on newer numpy, but also include fixes
# for compatibility with newer JAX versions. e.g. chex.
echo "numpy >= 1.24.1"                                  >> /opt/pip-tools.d/requirements-jax.in
echo "-e file://${SRC_PATH_JAX}"                        >> /opt/pip-tools.d/requirements-jax.in
echo "jaxlib @ file://$(ls ${SRC_PATH_JAX}/dist/*.whl)" >> /opt/pip-tools.d/requirements-jax.in
EOF

## Flax
RUN get-source.sh -l flax -m ${MANIFEST_FILE} -o /opt/pip-tools.d/requirements-flax.in

## Transformer engine: check out source and build wheel
ENV NVTE_FRAMEWORK=jax
ENV SRC_PATH_TE=${SRC_PATH_TE}
RUN <<"EOF" bash -ex -o pipefail
pip install ninja && rm -rf ~/.cache/pip
get-source.sh -l transformer-engine -m ${MANIFEST_FILE}
pushd ${SRC_PATH_TE}
## apply release-specific patches: cherry-pick changes after the last release tag
git cherry-pick 8e672ff0758033c348e263dbcd6a4b3578c01161
git cherry-pick bfe21c3d68b0a9951e5716fb520045db53419c5e
if ${PR728}; then
  git cherry-pick 7c1828f80edc1405d4ef1a7780c9e0046beab5c7  # https://github.com/NVIDIA/TransformerEngine/pull/745
fi
## end of apply release-specific patches
python setup.py bdist_wheel && rm -rf build
echo "transformer-engine @ file://$(ls ${SRC_PATH_TE}/dist/*.whl)" >> /opt/pip-tools.d/requirements-te.in
EOF

# TODO: properly configure entrypoint

###############################################################################
## Install primary packages and transitive dependencies
###############################################################################

FROM mealkit as final

RUN pip-finalize.sh
