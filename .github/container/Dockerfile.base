# syntax=docker/dockerfile:1-labs
ARG BASE_IMAGE=nvidia/cuda:12.3.0-devel-ubuntu22.04
ARG GIT_USER_NAME="JAX Toolbox"
ARG GIT_USER_EMAIL=jax@nvidia.com
ARG SRC_MANIFEST_FILE=manifest.yaml
ARG DEST_MANIFEST_DIR=/opt/manifest.d
ARG CLANG_VERSION=17

FROM ${BASE_IMAGE}
ARG GIT_USER_EMAIL
ARG GIT_USER_NAME
ARG SRC_MANIFEST_FILE
ARG DEST_MANIFEST_DIR
ARG CLANG_VERSION

###############################################################################
## Install Python and essential tools
###############################################################################

RUN <<"EOF" bash -ex
export DEBIAN_FRONTEND=noninteractive
export TZ=America/Los_Angeles
apt-get update

apt-get install -y \
  bat \
  build-essential \
  checkinstall \
  cmake \
  curl \
  git \
  gnupg \
  liblzma-dev \
  python-is-python3 \
  python3-pip \
  rsync \
  vim \
  wget \
  lsb-release software-properties-common  # for llvm.sh

# Install LLVM/Clang
bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)" -- ${CLANG_VERSION}
apt-get remove -y software-properties-common lsb-release
apt-get autoremove -y  # removes python3-blinker which conflicts with pip-compile in JAX

# Make sure that clang and clang++ point to the new version. This list is based
# on the symlinks installed by the `clang` (as opposed to `clang-14`) and `lld`
# (as opposed to `lld-14`) packages available in Ubuntu 22.04. 100 is an
# arbitrary priority.
update-alternatives --verbose \
  --install /usr/bin/clang          clang          /usr/lib/llvm-${CLANG_VERSION}/bin/clang 100 \
  --slave   /usr/bin/asan_symbolize asan_symbolize /usr/bin/asan_symbolize-${CLANG_VERSION} \
  --slave   /usr/bin/clang++        clang++        /usr/lib/llvm-${CLANG_VERSION}/bin/clang++ \
  --slave   /usr/bin/ld.lld         ld.lld         /usr/lib/llvm-${CLANG_VERSION}/bin/lld \
  --slave   /usr/bin/lld            lld            /usr/lib/llvm-${CLANG_VERSION}/bin/lld \
  --slave   /usr/bin/lld-link       lld-link       /usr/lib/llvm-${CLANG_VERSION}/bin/lld \
  --slave   /usr/bin/wasm-ld        wasm-ld        /usr/lib/llvm-${CLANG_VERSION}/bin/lld

# Make sure that any later attempt to install `clang` or `lld` will fail.
cat >/etc/apt/preferences.d/no-unversioned-clang-lld <<EOL
# LLVM is installed from apt.llvm.org using versioned packages, whereas the
# unversioned clang and lld packages come from Ubuntu and refer to older
# versions of LLVM. Please use versioned packages in this container.
Package: clang
Pin: release *
Pin-Priority: -1

Package: lld
Pin: release *
Pin-Priority: -1
EOL

apt-get clean
rm -rf /var/lib/apt/lists/*
EOF

RUN <<"EOF" bash -ex
git config --global user.name "${GIT_USER_NAME}"
git config --global user.email "${GIT_USER_EMAIL}"
EOF
RUN mkdir -p /opt/pip-tools.d
ADD --chmod=777 \
    get-source.sh \
    pip-finalize.sh \
    /usr/local/bin/
RUN wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_$(dpkg --print-architecture) -O /usr/local/bin/yq && \
    chmod 777 /usr/local/bin/yq
RUN git clone -b 23.3.1 https://github.com/pypa/pip.git /opt/pip
# Patch is specific to 23.3.1
# Generated via: "git diff > pip-vcs-equivalency.patch"
ADD pip-vcs-equivalency.patch /opt/pip/
RUN <<EOF bash -e -x
cd /opt/pip
git apply </opt/pip/pip-vcs-equivalency.patch
git add -u
git commit -m 'Adds JAX_TOOLBOX_VCS_EQUIVALENCY as a trigger to treat all github VCS installs for a package as equivalent. The spec of the last encountered version will be used'
EOF
RUN pip install --upgrade --no-cache-dir -e /opt/pip pip-tools && rm -rf ~/.cache/*

###############################################################################
## Install the latest versions of Nsight Systems and Nsight Compute
###############################################################################
ADD install-nsight.sh /usr/local/bin
RUN install-nsight.sh

###############################################################################
## Install cuDNN
###############################################################################

ADD install-cudnn.sh /usr/local/bin
RUN install-cudnn.sh

###############################################################################
## Install NCCL
###############################################################################

ADD install-nccl.sh /usr/local/bin
RUN install-nccl.sh

###############################################################################
## RoCE and InfiniteBand support
###############################################################################

ADD install-ofed.sh /usr/local/bin
RUN install-ofed.sh

##############################################################################
## Amazon EFA support (need to run it inside container separately)
##############################################################################

ADD install-efa.sh /usr/local/bin
ENV LD_LIBRARY_PATH=/opt/amazon/efa/lib:${LD_LIBRARY_PATH}
ENV PATH=/opt/amazon/efa/bin:${PATH}

###############################################################################
## Add the systemcheck to the entrypoint.
###############################################################################

COPY check-shm.sh /opt/nvidia/entrypoint.d/

###############################################################################
## Copy manifest file to the container
###############################################################################

# Set the manifest env vars
ENV MANIFEST_FILE=${DEST_MANIFEST_DIR}/${SRC_MANIFEST_FILE}
# Copy all required files for manifestation
ADD ${SRC_MANIFEST_FILE} \
    bump.sh \
    bump-openxla-triton.sh \
    create-distribution.sh \
    ${DEST_MANIFEST_DIR}/
COPY patches/ ${DEST_MANIFEST_DIR}/patches/
