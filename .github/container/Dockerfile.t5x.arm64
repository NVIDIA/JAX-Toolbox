# syntax=docker/dockerfile:1-labs
# Example command to build manually:
#   docker buildx build -f Dockerfile.t5x.arm64 --tag t5x --build-arg BASE_IMAGE=ghcr.io/nvidia/jax:mealkit-2024-01-22 .

ARG BASE_IMAGE=ghcr.io/nvidia/jax:mealkit
ARG GIT_URLREF_T5X  # if not set, will use defaults from the manifest file
ARG GIT_URLREF_TFTEXT
ARG SRC_PATH_GRAIN=/opt/grain
ARG SRC_PATH_TFTEXT=/opt/tensorflow-text
ARG SRC_PATH_T5X=/opt/t5x

###############################################################################
## build several packages which do not have working arm64 pip wheels
###############################################################################

#------------------------------------------------------------------------------
# Install bazel (needed by some source builds) and expose the python version
#------------------------------------------------------------------------------

FROM ${BASE_IMAGE} as wheel-builder

RUN wget https://github.com/bazelbuild/bazelisk/releases/download/v1.17.0/bazelisk-linux-arm64 -O /usr/bin/bazel && \
    chmod a+x /usr/bin/bazel

RUN python -c 'import sys; vi = sys.version_info; print(f"{vi.major}.{vi.minor}")'  > /mealkit-python-version


#------------------------------------------------------------------------------
# build array_record 0.5.0 from source
#------------------------------------------------------------------------------
# TODO: Remove this once array_record maintainers have published an arm64 wheel.

FROM linaro/tensorflow-arm64-build:2.12-multipython as array_record-builder

COPY --from=wheel-builder /mealkit-python-version /mealkit-python-version

# The bazel build of array_record makes some strong assumptions on where the cpp toolchain lives.
# We therefore replicate (part of) its Dockerfile, which ensures everything is in the right place:
#   https://github.com/google/array_record/tree/v0.5.0/oss/build.Dockerfile.aarch64
#
# BEGIN
    ENV DEBIAN_FRONTEND=noninteractive

    # Install supplementary Python interpreters
    RUN export PYTHON_BIN_PATH=/usr/bin/python$(cat /mealkit-python-version) && \
        ln -s ${PYTHON_BIN_PATH} /usr/local/bin/python && \
        ln -s ${PYTHON_BIN_PATH} /usr/local/bin/python3 && \
        ln -s ${PYTHON_BIN_PATH} /usr/bin/python

    RUN apt update && \
        apt install -yqq \
            apt-utils \
            build-essential \
            checkinstall \
            libffi-dev

    # Install pip dependencies needed for array_record
    RUN /usr/bin/python -m pip install -U pip && \
        /usr/bin/python -m pip install -U \
            absl-py \
            auditwheel \
            etils[epath] \
            patchelf \
            setuptools \
            twine \
            wheel
# END

RUN <<"EOT" bash -exu -o pipefail
git clone https://github.com/google/array_record.git /tmp/array_record
cd /tmp/array_record
git checkout v0.5.0

export CROSSTOOL_TOP="@ml2014_aarch64_config_aarch64//crosstool:toolchain"
export AUDITWHEEL_PLATFORM="manylinux2014_aarch64"
./oss/build_whl.sh
EOT


#------------------------------------------------------------------------------
# build grain from source
#------------------------------------------------------------------------------
# TODO: Remove this once grain maintainers have published an arm64 wheel.

FROM wheel-builder as grain-builder
ARG SRC_PATH_GRAIN

COPY --from=array_record-builder /tmp/array_record/all_dist/array_record*linux_aarch64.whl /opt/

# The following setup steps are based on
#   https://github.com/google/grain/blob/ab557c31672cc2ac6f9b31e33aea2df00a7da5bf/grain/oss/build.Dockerfile
#
# BEGIN
    # Setup python
    RUN export MEALKIT_PYTHON_VERSION=$(cat /mealkit-python-version) && \
        apt-get update && apt-get install -y \
            python3-dev python3-pip python3-venv && \
            rm -rf /var/lib/apt/lists/* && \
            python${MEALKIT_PYTHON_VERSION} -m pip install pip --upgrade && \
            update-alternatives --install /usr/bin/python python /usr/bin/python${MEALKIT_PYTHON_VERSION} 0

    # Install pip dependencies needed for grain
    RUN pip install \
            absl-py \
            /opt/array_record*.whl \
            build \
            cloudpickle \
            dm-tree \
            etils[epath] \
            jaxtyping \
            "more-itertools>=9.1.0" \
            numpy

    # Install pip dependencies needed for grain tests
    RUN pip install \
            dill \
            jax \
            jaxlib \
            tensorflow \
            tensorflow-datasets
# END

RUN <<"EOT" bash -exu -o pipefail

# Check out source of grain-nightly 0.0.4
git clone https://github.com/google/grain ${SRC_PATH_GRAIN}
pushd ${SRC_PATH_GRAIN}
git checkout fa79b9dea81ffb00555a6c2ae2898be4bdd5e564

# Make bazel stop complaining about sharding and disable some tests with missing bazel build deps
sed -i 's| bazel test | bazel test --test_sharding_strategy=disabled |' ./grain/oss/build_whl.sh

export MEALKIT_PYTHON_VERSION=$(cat /mealkit-python-version)
export PYTHON_MAJOR_VERSION=${MEALKIT_PYTHON_VERSION%.*}
export PYTHON_MINOR_VERSION=${MEALKIT_PYTHON_VERSION#*.}
chmod a+x ./grain/oss/build_whl.sh
./grain/oss/build_whl.sh

ls /tmp/grain/all_dist/*.whl
EOT

#------------------------------------------------------------------------------
# build tensorflow-text 2.13.0 from source
#------------------------------------------------------------------------------

FROM wheel-builder as tftext-builder
ARG GIT_URLREF_TFTEXT
ARG SRC_PATH_TFTEXT
RUN <<"EOF" bash -exu -o pipefail
pip install tensorflow_datasets==4.9.2 auditwheel tensorflow==2.13.0
DEFAULT_GIT_URLREF_TFTEXT=$(yq '.tensorflow-text | [(.url, .latest_verified_commit)] | join("#")' ${MANIFEST_FILE})
get-source.sh -c ${SRC_PATH_TFTEXT} -u ${GIT_URLREF_TFTEXT:-$DEFAULT_GIT_URLREF_TFTEXT}
cd ${SRC_PATH_TFTEXT}
./oss_scripts/run_build.sh
EOF

###############################################################################
## T5X for AArch64
###############################################################################

FROM wheel-builder as mealkit
ARG SRC_PATH_TFTEXT
ARG SRC_PATH_T5X

COPY --from=array_record-builder /tmp/array_record/all_dist/array_record*linux_aarch64.whl /opt/
RUN echo "array_record @ file://$(ls /opt/array_record*.whl)" >> /opt/pip-tools.d/requirements-t5x.in

COPY --from=grain-builder /tmp/grain/all_dist/grain*.whl /opt/
RUN echo "grain @ file://$(ls /opt/grain*.whl)" >> /opt/pip-tools.d/requirements-t5x.in

COPY --from=tftext-builder ${SRC_PATH_TFTEXT}/tensorflow_text*.whl /opt/
RUN echo "tensorflow-text @ file://$(ls /opt/tensorflow_text*.whl)" >> /opt/pip-tools.d/requirements-t5x.in

# obtain t5x source
RUN <<"EOF" bash -exu -o pipefail
DEFAULT_GIT_URLREF_T5X=$(yq '.t5x | [(.url, .latest_verified_commit)] | join("#")' ${MANIFEST_FILE})
get-source.sh -c ${SRC_PATH_T5X} -u ${GIT_URLREF_T5X:-$DEFAULT_GIT_URLREF_T5X} -p /opt/pip-tools.d/requirements-t5x.in
sed -i "s|${SRC_PATH_T5X}|${SRC_PATH_T5X}[gpu]|g" /opt/pip-tools.d/requirements-t5x.in
EOF

# Remove head-of-tree specs from packages already shipped in the container
RUN <<"EOF" bash -exu -o pipefail
pushd ${SRC_PATH_T5X}
sed -i "s| @ git+https://github.com/google/flax#egg=flax||g" setup.py
EOF

# Fix ARM64 deps
RUN <<"EOF" bash -exu -o pipefail
sed -i "s/'tensorflow/#'tensorflow/" setup.py

sed -i "s/f'jax/#f'jax/" setup.py
sed -i "s/'tpu/#'tpu/" setup.py

sed -i "s/'protobuf/#'protobuf/" setup.py
sed -i "s/'numpy/#'numpy/" setup.py

if git diff --quiet; then
    echo "URL specs no longer present in select dependencies of t5x"
    exit 1
else
    git config --global user.name "JAX Toolbox"
    git config --global user.email "jax@nvidia.com"
    git commit -a -m "remove URL specs from select dependencies of t5x"
    rm ~/.gitconfig
fi
popd
EOF

ADD test-t5x.sh /usr/local/bin

###############################################################################
## Install accumulated packages from the base image and the previous[] stage
###############################################################################

FROM mealkit as final

RUN pip-finalize.sh
