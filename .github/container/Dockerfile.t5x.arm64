# syntax=docker/dockerfile:1-labs
# Example command to build manually:
#   docker buildx build -f Dockerfile.t5x.arm64 --tag t5x --build-arg BASE_IMAGE=ghcr.io/nvidia/jax:mealkit-2023-12-12 .

ARG BASE_IMAGE=ghcr.io/nvidia/jax:mealkit
ARG REPO_T5X=https://github.com/google-research/t5x.git
ARG REF_T5X=main
ARG SRC_PATH_T5X=/opt/paxml

###############################################################################
## build array_record and grain which do not have working arm64 pip wheels
###############################################################################

ARG BASE_IMAGE
FROM ${BASE_IMAGE} as wheel-builder

# grain build needs bazel
RUN wget https://github.com/bazelbuild/bazelisk/releases/download/v1.17.0/bazelisk-linux-arm64 -O /usr/bin/bazel && \
    chmod a+x /usr/bin/bazel

#------------------------------------------------------------------------------
# build array_record 0.5.0 from source
#------------------------------------------------------------------------------
# TODO: Remove this once array_record maintainers have published an arm64 wheel.

# The bazel build of array_record makes some strong assumptions on where the cpp toolchain lives.
# We therefore stick to its existing Dockerfile, which ensures everything is in the right place:
#
#   https://github.com/google/array_record/tree/v0.5.0/oss/build.Dockerfile.aarch64
#
FROM linaro/tensorflow-arm64-build:2.12-multipython as array_record-builder
# TODO: Infer PYTHON_VERSION from our own $BASE_IMAGE?
ARG PYTHON_VERSION="3.10"

ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHON_BIN_PATH=/usr/bin/python${PYTHON_VERSION}

# Install supplementary Python interpreters
RUN ln -s ${PYTHON_BIN_PATH} /usr/local/bin/python && \
    ln -s ${PYTHON_BIN_PATH} /usr/local/bin/python3 && \
    ln -s ${PYTHON_BIN_PATH} /usr/bin/python

RUN --mount=type=cache,target=/var/cache/apt \
    apt update && \
    apt install -yqq \
        apt-utils \
        build-essential \
        checkinstall \
        libffi-dev

# Install pip dependencies needed for array_record
RUN --mount=type=cache,target=/root/.cache \
    ${PYTHON_BIN_PATH} -m pip install -U pip && \
    ${PYTHON_BIN_PATH} -m pip install -U \
        absl-py \
        auditwheel \
        etils[epath] \
        patchelf \
        setuptools \
        twine \
        wheel;

RUN <<"EOT" bash -exu
set -o pipefail

git clone https://github.com/google/array_record.git /tmp/array_record
cd /tmp/array_record
git checkout v0.5.0

export CROSSTOOL_TOP="@ml2014_aarch64_config_aarch64//crosstool:toolchain"
export AUDITWHEEL_PLATFORM="manylinux2014_aarch64"
./oss/build_whl.sh
EOT


#------------------------------------------------------------------------------
# build grain from a manually-patched version
#------------------------------------------------------------------------------
# TODO: Remove this once grain maintainers have published an arm64 wheel.

FROM wheel-builder as grain-builder
ARG PYTHON_VERSION="3.10"

RUN <<"EOT" bash -exu
set -o pipefail

# Setup python
apt-get update && apt-get install -y \
    python3-dev python3-pip python3-venv && \
    rm -rf /var/lib/apt/lists/* && \
    python${PYTHON_VERSION} -m pip install pip --upgrade && \
    update-alternatives --install /usr/bin/python python /usr/bin/python${PYTHON_VERSION} 0

# NOTE: We are ignoring the fact that "array_record" will actually resolve to the wrong version
#   here. When we put it all together in the final image, we make sure that the right version is
#   already installed.
pip install \
    absl-py \
    array_record \
    build \
    cloudpickle \
    dm-tree \
    etils[epath] \
    "more-itertools>=9.1.0" \
    numpy;

pip install \
    dill \
    jax \
    jaxlib \
    tensorflow \
    tensorflow-datasets;

git clone https://github.com/gspschmid/grain /opt/grain
cd /opt/grain
git checkout external-arm64-build-poc

chmod a+x ./grain/oss/build_whl.sh
./grain/oss/build_whl.sh

ls /tmp/grain/all_dist/*.whl
EOT


###############################################################################
## T5X for AArch64
###############################################################################

ARG BASE_IMAGE
FROM ${BASE_IMAGE} as mealkit
ARG REPO_T5X
ARG REF_T5X
ARG SRC_PATH_T5X

COPY --from=array_record-builder /tmp/array_record/all_dist/array_record*linux_aarch64.whl /opt/
RUN echo "array_record @ file://$(ls /opt/array_record*.whl)" >> /opt/pip-tools.d/manifest.pax

COPY --from=grain-builder /tmp/grain/all_dist/grain*.whl /opt/
RUN echo "grain @ file://$(ls /opt/grain*.whl)" >> /opt/pip-tools.d/manifest.pax


### --- TO BE REFACTORED? (everything below is as in @nouiz's original PR) ---

# force a recent version to have latest protobuf dep
# Install now as some build need them.
RUN pip install "tensorflow_datasets==4.9.2"
RUN pip install "tensorflow==2.13.0"
RUN pip install "chex==0.1.7"
RUN <<"EOF" bash -ex
cd /opt
git clone http://github.com/tensorflow/text.git
cd text
git checkout v2.13.0
EOF

RUN <<"EOF" bash -ex
cd /opt/text

wget https://github.com/bazelbuild/bazelisk/releases/download/v1.17.0/bazelisk-linux-arm64 -O /usr/bin/bazel ;
chmod a+x /usr/bin/bazel

./oss_scripts/run_build.sh
find * | grep '.whl$'
EOF
RUN pip install /opt/text/tensorflow_text-*.whl
#RUN echo "-e file:///opt/text/tensorflow_text-*.whl"  >> /opt/pip-tools.d/manifest.t5x
RUN echo "tensorflow-text @  file://$(ls /opt/text/tensorflow_text-*.whl)" >> /opt/pip-tools.d/manifest.t5x

# Install T5 now, Pip will build the wheel from source, it needs Rust.
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > /tmp/rustup.sh && \
    echo "be3535b3033ff5e0ecc4d589a35d3656f681332f860c5fd6684859970165ddcc /tmp/rustup.sh" | sha256sum --check && \
    bash /tmp/rustup.sh -y && \
    export PATH=$PATH:/root/.cargo/bin && \
    pip install t5 && \
    rm -Rf /root/.cargo /root/.rustup && \
    mv /root/.profile /root/.profile.save && \
    grep -v cargo /root/.profile.save > /root/.profile && \
    rm /root/.profile.save && \
    mv /root/.bashrc /root/.bashrc.save && \
    grep -v cargo /root/.bashrc.save > /root/.bashrc && \
    rm /root/.bashrc.save && \
        rm -Rf /root/.cache /tmp/*

# NOTE(gspschmid): Broken? Should've been "echo t5"?
# RUN "t5 >> /opt/pip-tools.d/manifest.t5x"

RUN <<"EOF" bash -ex
get-source.sh -f ${REPO_T5X} -r ${REF_T5X} -d ${SRC_PATH_T5X}
echo "-e file://${SRC_PATH_T5X}[gpu]" >> /opt/pip-tools.d/manifest.t5x

# remove head-of-tree specs from select dependencies
pushd ${SRC_PATH_T5X}
sed -i "s| @ git+https://github.com/google/flax#egg=flax||g" setup.py
# for ARM64 build
sed -i "s/tensorflow/#tensorflow/" setup.py
sed -i "s/t5=/#t5=/" setup.py
sed -i "s/^jax/#jax/" setup.py

sed -i "s/f'jax/#f'jax/" setup.py
sed -i "s/'tpu/#'tpu/" setup.py

sed -i 's/protobuf/#protobuf/' setup.py
sed -i 's/numpy/#numpy/' setup.py

if git diff --quiet; then
    echo "URL specs no longer present in select dependencies of t5x"
    exit 1
else
    git commit -a -m "remove URL specs from select dependencies of t5x"
fi
popd
EOF

ADD test-t5x.sh /usr/local/bin

###############################################################################
## Install accumulated packages from the base image and the previous stage
###############################################################################

FROM mealkit as final

RUN pip uninstall -y tensorflow-text

RUN echo "tensorflow_datasets==4.9.2" >> /opt/pip-tools.d/manifest.t5x

RUN pip-finalize.sh
