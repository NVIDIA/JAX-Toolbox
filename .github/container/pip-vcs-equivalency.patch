diff --git a/src/pip/_internal/resolution/resolvelib/requirements.py b/src/pip/_internal/resolution/resolvelib/requirements.py
index 7d1e7bfdd..d67042896 100644
--- a/src/pip/_internal/resolution/resolvelib/requirements.py
+++ b/src/pip/_internal/resolution/resolvelib/requirements.py
@@ -5,6 +5,7 @@ from pip._internal.req.constructors import install_req_drop_extras
 from pip._internal.req.req_install import InstallRequirement
 
 from .base import Candidate, CandidateLookup, Requirement, format_name
+import os
 
 
 class ExplicitRequirement(Requirement):
@@ -37,6 +38,15 @@ class ExplicitRequirement(Requirement):
         return self.candidate, None
 
     def is_satisfied_by(self, candidate: Candidate) -> bool:
+        # TODO: Currently only checks if the library is the same.
+        # It is more robust to check the other properties of requirement
+        # but this is sufficient for us.
+        if os.environ.get('JAX_TOOLBOX_VCS_EQUIVALENCY', False) and \
+                self.candidate.name == candidate.name and \
+                self.candidate.source_link.is_vcs and \
+                candidate.source_link.is_vcs \
+                :
+            return True
         return candidate == self.candidate
 
 
diff --git a/src/pip/_vendor/resolvelib/resolvers.py b/src/pip/_vendor/resolvelib/resolvers.py
index 2c3d0e306..1a87b3289 100644
--- a/src/pip/_vendor/resolvelib/resolvers.py
+++ b/src/pip/_vendor/resolvelib/resolvers.py
@@ -5,6 +5,8 @@ import operator
 from .providers import AbstractResolver
 from .structs import DirectedGraph, IteratorMapping, build_iter_view
 
+import os
+
 RequirementInformation = collections.namedtuple(
     "RequirementInformation", ["requirement", "parent"]
 )
@@ -165,8 +167,25 @@ class Resolution(object):
         else:
             information = [RequirementInformation(requirement, parent)]
 
+        # Change generator -> concrete list
+        matches = build_iter_view(matches)
+        # Force the order of matches (first appears to be used as representative
+        # for the equivalency class). This puts vcs installs with @ at the top
+        def vcs_compare(req):
+            if hasattr(req, 'source_link') \
+                    and req.source_link \
+                    and req.source_link.is_vcs \
+                    and ('@' in req.source_link.show_url):
+                # 0 is preferred and is bubbled to the top
+                return 0
+            return 1
+
+        # Need to check criterion as well b/c if None then this is first instance
+        # of this identifier and this will error
+        if os.environ.get('JAX_TOOLBOX_VCS_EQUIVALENCY', False) and criterion:
+            matches = build_iter_view(sorted(list(matches), key=vcs_compare))
         criterion = Criterion(
-            candidates=build_iter_view(matches),
+            candidates=matches,
             information=information,
             incompatibilities=incompatibilities,
         )
