name: ~test Rosetta

on:
  workflow_call:
    inputs:
      ROSETTA_IMAGE:
        type: string
        description: 'Rosetta image build by NVIDIA/JAX-Toolbox'
        required: true
        default: 'ghcr.io/nvidia/t5x:latest'
    outputs:
      TEST_ARTIFACT_NAME:
        description: 'Name of the unit test artifact for downstream workflows'
        value: ${{ jobs.rosetta-unit-tests.outputs.TEST_ARTIFACT_NAME }}
      TEST_STATUS:
        description: 'Summary pass/fail value indicating if results from tests are acceptable'
        value: ${{ jobs.publish-test.outputs.STATUS }}

env:
  TEST_ARTIFACT_NAME: rosetta-test-logs
  TEST_LOG_LOCAL_PATH: /log/unit-report.jsonl

jobs:
  rosetta-unit-tests:
    runs-on: [self-hosted, V100]
    outputs:
      TEST_ARTIFACT_NAME: ${{ env.TEST_ARTIFACT_NAME }}
    steps:
      - name: Print environment variables
        run: |
          env

      - name: Print GPU information
        run: nvidia-smi  

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Rosetta image
        shell: bash -x -e {0}
        run: |
          docker pull ${{ inputs.ROSETTA_IMAGE }}
          docker tag ${{ inputs.ROSETTA_IMAGE }} rosetta:latest

      - name: Run Rosetta tests w/ docker
        shell: docker run --gpus all -v {0}:/cmd.sh -v /log:/log rosetta:latest bash -x -e /cmd.sh
        run: |
          ROSETTA_PATH=$(dirname $(python -c "import rosetta; print(*rosetta.__path__)"))
          pip install "${ROSETTA_PATH}[test]" pytest-reportlog
          pytest --report-log=${{ env.TEST_LOG_LOCAL_PATH }} ${ROSETTA_PATH} || true

      - name: Upload unit test json logs
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TEST_ARTIFACT_NAME }}
          path: ${{ env.TEST_LOG_LOCAL_PATH }}

  publish-test:
    needs: rosetta-unit-tests
    uses: ./.github/workflows/_publish_badge.yaml
    if: ( always() )
    secrets: inherit
    with:
      ENDPOINT_FILENAME: 'rosetta-unit-test-status.json'
      PUBLISH: false
      SCRIPT: |
          ARTIFACTS="${{ needs.rosetta-unit-tests.outputs.TEST_ARTIFACT_NAME }}/*.jsonl"
          all_outcomes() {
            cat $ARTIFACTS | jq -r '. | select((.["$report_type"] == "TestReport") and (.when == "call")) | .outcome'
          }
          cnt_type() {
            cat $ARTIFACTS | jq '. | select((.["$report_type"] == "TestReport") and (.when == "call") and (.outcome | contains("'${1}'"))) | .outcome' | wc -l
          }
          SKIPPED_TESTS=$(cnt_type skipped)
          FAILED_TESTS=$(cnt_type failed)
          PASSED_TESTS=$(cnt_type passed)
          TOTAL_TESTS=$(all_outcomes | wc -l)
          echo "## Unit/Integration test breakdown" | tee -a $GITHUB_STEP_SUMMARY
          all_outcomes | sort | uniq -c | tee -a $GITHUB_STEP_SUMMARY
          if [[ $FAILED_TESTS -eq 0 ]] && [[ $TOTAL_TESTS -gt 0 ]]; then
            BADGE_COLOR=brightgreen
            echo "STATUS=success" >> $GITHUB_OUTPUT
          else
            echo "STATUS=failure" >> $GITHUB_OUTPUT
            if [[ $PASSED_TESTS -eq 0 ]]; then
              BADGE_COLOR=red
            else
              BADGE_COLOR=yellow
            fi
          fi
          echo "LABEL='V100 Unit'" >> $GITHUB_OUTPUT
          echo "MESSAGE='${PASSED_TESTS}/${SKIPPED_TESTS}/${FAILED_TESTS} pass/skip/fail'" >> $GITHUB_OUTPUT
          echo "COLOR='${BADGE_COLOR}'" >> $GITHUB_OUTPUT
