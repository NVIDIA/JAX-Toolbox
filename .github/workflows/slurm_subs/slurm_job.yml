name: SLURM Job Execution

on:
  workflow_call:
    inputs:
      image:
        type: string
        required: true
        description: Docker image to use for the test.
      job_name:
        type: string
        required: true
        description: Name of the SLURM job.
      test_script:
        type: string
        required: true
        description: The test script or commands to execute inside the container.
      resources:
        type: object
        required: true
        properties:
          nodes:
            type: number
            required: true
          gpus_per_node:
            type: number
            required: true
          time_limit:
            type: string
            required: true
        description: Resources required for the SLURM job.
      environment_variables:
        type: string
        required: false
        default: ''
        description: Additional environment variables for the job.
    secrets:
      ssh_private_key:
        required: true
      cluster_login_user:
        required: true
      tensorboard_upload_user:
        required: true

jobs:
  slurm-job:
    runs-on: [jumpbox]
    steps:
      - name: Print environment variables
        run: env

      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: ./.github/actions/setup-ssh
        with:
          ssh-private-key: ${{ secrets.ssh_private_key }}
          ssh-known-hosts: ${{ vars.SSH_KNOWN_HOSTS }}

      - name: Define metadata
        id: meta
        run: |
          JOB_NAME="${{ inputs.job_name }}"
          IMAGE="${{ inputs.image }}"
          LOG_FILE="/nfs/cluster/${JOB_NAME}.log"
          MODEL_PATH="/nfs/cluster/${JOB_NAME}"
          echo "JOB_NAME=${JOB_NAME}" >> $GITHUB_OUTPUT
          echo "IMAGE=${IMAGE}" >> $GITHUB_OUTPUT
          echo "LOG_FILE=${LOG_FILE}" >> $GITHUB_OUTPUT
          echo "MODEL_PATH=${MODEL_PATH}" >> $GITHUB_OUTPUT

      - name: Submit SLURM job over SSH
        id: submit
        run: |
          sshx="ssh -o ServerAliveInterval=7 ${{ secrets.cluster_login_user }}@${{ vars.HOSTNAME_SLURM_LOGIN }}"
          $sshx "mkdir -p ${{ steps.meta.outputs.MODEL_PATH }}"
          JOB_ID=$($sshx sbatch --parsable <<-EOF
            #!/bin/bash
            #SBATCH --job-name=${{ steps.meta.outputs.JOB_NAME }}
            #SBATCH --exclusive
            #SBATCH --nodes=${{ inputs.resources.nodes }}
            #SBATCH --gpus-per-node=${{ inputs.resources.gpus_per_node }}
            #SBATCH --time=${{ inputs.resources.time_limit }}
            #SBATCH --output=${{ steps.meta.outputs.LOG_FILE }}
            #SBATCH --export="${{ inputs.environment_variables }}"

            # Preload container
            srun --ntasks-per-node=1 --container-name=runtime --container-image=${{ steps.meta.outputs.IMAGE }} true

            # Run test script
            srun --ntasks=$(( ${{ inputs.resources.nodes }} * ${{ inputs.resources.gpus_per_node }} )) \
              --container-name=runtime \
              --container-mounts=${{ steps.meta.outputs.MODEL_PATH }}:/output \
              --container-entrypoint \
              bash -c "${{ inputs.test_script }}"
          EOF
          )
          echo "SLURM_JOB_ID=${JOB_ID}" >> $GITHUB_OUTPUT

          # Monitor SLURM job
          ${GITHUB_WORKSPACE}/.github/scripts/wait_for_slurm_job.sh ${{ secrets.cluster_login_user }}@${{ vars.HOSTNAME_SLURM_LOGIN }} ${JOB_ID}
          
          # Get SLURM job status
          SLURM_STATE=$($sshx sacct -j ${JOB_ID} --format=State --parsable2 --noheader | head -n 1)
          SLURM_EXITCODE=$($sshx sacct -j ${JOB_ID} --format=exitcode --parsable2 --noheader | sort -r -u | head -1 | cut -f 1 -d":" | tr -d ' ')
          echo "SLURM_STATE=${SLURM_STATE}" >> $GITHUB_OUTPUT
          echo "SLURM_EXITCODE=${SLURM_EXITCODE}" >> $GITHUB_OUTPUT

      - name: Handle cancellation
        if: cancelled()
        run: |
          ssh ${{ secrets.cluster_login_user }}@${{ vars.HOSTNAME_SLURM_LOGIN }} \
            scancel ${{ steps.submit.outputs.SLURM_JOB_ID }}

      - name: Retrieve logs and artifacts
        run: |
          mkdir -p output
          rsync -rtz --progress \
            ${{ secrets.cluster_login_user }}@${{ vars.HOSTNAME_SLURM_LOGIN }}:${{ steps.meta.outputs.LOG_FILE }} \
            output/${{ steps.meta.outputs.JOB_NAME }}.log
          rsync -rtz --progress \
            ${{ secrets.cluster_login_user }}@${{ vars.HOSTNAME_SLURM_LOGIN }}:${{ steps.meta.outputs.MODEL_PATH }}/* \
            output/

          rsync -rtz --progress \
            output/ \
            ${{ secrets.tensorboard_upload_user }}@${{ vars.HOSTNAME_TENSORBOARD }}:/tensorboard-logs/${{ steps.meta.outputs.JOB_NAME }}/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.meta.outputs.JOB_NAME }}
          path: output/*
