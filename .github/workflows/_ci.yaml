name: ~CI, single-arch
run-name: CI-${{ inputs.ARCHITECTURE }}
on:
  workflow_call:
    inputs:
      ARCHITECTURE:
        type: string
        required: true
      BUILD_DATE:
        type: string
        description: Build date in YYYY-MM-DD format
        required: false
        default: NOT SPECIFIED
      BUMP_MANIFEST:
        type: boolean
        description: Flag to bump manifest file or not
        default: false
        required: false
    outputs:
      CONTAINER_TAGS:
        description: Single JSON object to store all generated docker tags
        value: ${{ jobs.save-tags.output.CONTAINER_TAGS }}
permissions:
  contents: read  # to fetch code
  actions:  write # to cancel previous workflows
  packages: write # to upload container

jobs:

  build-base:
    uses: ./.github/workflows/_build_base.yaml
    with:
      ARCHITECTURE: ${{ inputs.ARCHITECTURE }}
      BUILD_DATE: ${{ inputs.BUILD_DATE }}
      BUMP_MANIFEST: ${{ inputs.BUMP_MANIFEST }}
    secrets: inherit

  build-jax:
    needs: build-base
    uses: ./.github/workflows/_build_jax.yaml
    with:
      ARCHITECTURE: ${{ inputs.ARCHITECTURE }}
      BUILD_DATE: ${{ inputs.BUILD_DATE }}
      BASE_IMAGE: ${{ needs.build-base.outputs.DOCKER_TAG }}
    secrets: inherit

  build-t5x:
    needs: build-jax
    if: inputs.ARCHITECTURE == 'amd64' # T5X arm64 build is wip in PR 252
    uses: ./.github/workflows/_build.yaml
    with:
      ARCHITECTURE: ${{ inputs.ARCHITECTURE }}
      ARTIFACT_NAME: "artifact-t5x-build"
      BADGE_FILENAME: "badge-t5x-build"
      BUILD_DATE: ${{ needs.metadata.outputs.BUILD_DATE }}
      BASE_IMAGE: ${{ needs.build-jax.outputs.DOCKER_TAG_MEALKIT }}
      CONTAINER_NAME: upstream-t5x
      DOCKERFILE: .github/container/Dockerfile.t5x
    secrets: inherit

  build-pallas:
    needs: build-jax
    if: inputs.ARCHITECTURE == 'amd64' # Triton does not seem to support arm64
    uses: ./.github/workflows/_build.yaml
    with:
      ARCHITECTURE: ${{ inputs.ARCHITECTURE }}
      ARTIFACT_NAME: artifact-pallas-build
      BADGE_FILENAME: badge-pallas-build
      BUILD_DATE: ${{ inputs.BUILD_DATE }}
      BASE_IMAGE: ${{ needs.build-jax.outputs.DOCKER_TAG_MEALKIT }}
      CONTAINER_NAME: pallas
      DOCKERFILE: .github/container/Dockerfile.pallas
    secrets: inherit

  build-maxtext:
    needs: build-jax
    if: inputs.ARCHITECTURE == 'amd64' # Triton does not seem to support arm64
    uses: ./.github/workflows/_build.yaml
    with:
      ARCHITECTURE: ${{ inputs.ARCHITECTURE }}
      ARTIFACT_NAME: artifact-maxtext-build
      BADGE_FILENAME: badge-maxtext-build
      BUILD_DATE: ${{ inputs.BUILD_DATE }}
      BASE_IMAGE: ${{ needs.build-jax.outputs.DOCKER_TAG_MEALKIT }}
      CONTAINER_NAME: maxtext
      DOCKERFILE: .github/container/Dockerfile.maxtext.amd64
    secrets: inherit

  build-pax:
    needs: build-jax
    uses: ./.github/workflows/_build.yaml
    with:
      ARCHITECTURE: ${{ inputs.ARCHITECTURE }}
      ARTIFACT_NAME: artifact-pax-build
      BADGE_FILENAME: badge-pax-build
      BUILD_DATE: ${{ inputs.BUILD_DATE }}
      BASE_IMAGE: ${{ needs.build-jax.outputs.DOCKER_TAG_MEALKIT }}
      CONTAINER_NAME: upstream-pax
      DOCKERFILE: .github/container/Dockerfile.pax.${{ inputs.ARCHITECTURE }}
    secrets: inherit

  build-levanter:
    needs: [build-jax]
    uses: ./.github/workflows/_build.yaml
    with:
      ARCHITECTURE: ${{ inputs.ARCHITECTURE }}
      ARTIFACT_NAME: "artifact-levanter-build"
      BADGE_FILENAME: "badge-levanter-build"
      BUILD_DATE: ${{ inputs.BUILD_DATE }}
      BASE_IMAGE: ${{ needs.build-jax.outputs.DOCKER_TAG_MEALKIT }}
      CONTAINER_NAME: levanter
      DOCKERFILE: .github/container/Dockerfile.levanter
    secrets: inherit

  build-rosetta-t5x:
    needs: build-t5x
    uses: ./.github/workflows/_build_rosetta.yaml
    with:
      ARCHITECTURE: ${{ inputs.ARCHITECTURE }}
      BUILD_DATE: ${{ inputs.BUILD_DATE }}
      BASE_IMAGE: ${{ needs.build-t5x.outputs.DOCKER_TAG_MEALKIT }}
      BASE_LIBRARY: t5x
    secrets: inherit

  build-rosetta-pax:
    needs: build-pax
    uses: ./.github/workflows/_build_rosetta.yaml
    with:
      ARCHITECTURE: ${{ inputs.ARCHITECTURE }}
      BUILD_DATE: ${{ inputs.BUILD_DATE }}
      BASE_IMAGE: ${{ needs.build-pax.outputs.DOCKER_TAG_MEALKIT }}
      BASE_LIBRARY: pax
    secrets: inherit

  save-tags:
    runs-on: ubuntu-22.04
    needs:
      - build-jax
      - build-t5x
      - build-pallas
      - build-pax
      - build-rosetta-t5x
      - build-rosetta-pax
    outputs:
      CONTAINER_TAGS: ${{ steps.save-docker-tags.outputs.CONTAINER_TAGS }}
    steps:
      - name: Save docker tags in a single JSON object
        id: save-docker-tags
        run: |
          CONTAINER_TAGS_JSON=$(cat << EOF
            { \
            "tag-jax-mealkit": "${{ needs.build-jax.outputs.DOCKER_TAG_MEALKIT }}", \
            "tag-jax-final": "${{ needs.build-jax.outputs.DOCKER_TAG_FINAL }}", \
            "tag-upstream-t5x-mealkit": "${{ needs.build-t5x.outputs.DOCKER_TAG_MEALKIT }}", \
            "tag-upstream-t5x-final": "${{ needs.build-t5x.outputs.DOCKER_TAG_FINAL }}", \
            "tag-pallas-mealkit": "${{ needs.build-pallas.outputs.DOCKER_TAG_MEALKIT }}", \
            "tag-pallas-final": "${{ needs.build-pallas.outputs.DOCKER_TAG_FINAL }}", \
            "tag-upstream-pax-mealkit": "${{ needs.build-pax.outputs.DOCKER_TAG_MEALKIT }}", \
            "tag-upstream-pax-final": "${{ needs.build-pax.outputs.DOCKER_TAG_FINAL }}", \
            "tag-t5x-mealkit": "${{ needs.build-rosetta-t5x.outputs.DOCKER_TAG_MEALKIT }}", \
            "tag-t5x-final": "${{ needs.build-rosetta-t5x.outputs.DOCKER_TAG_FINAL }}", \
            "tag-pax-mealkit": "${{ needs.build-rosetta-pax.outputs.DOCKER_TAG_MEALKIT }}", \
            "tag-pax-final": "${{ needs.build-rosetta-pax.outputs.DOCKER_TAG_FINAL }}" \
            }
          EOF

          )

          echo "CONTAINER_TAGS=${CONTAINER_TAGS_JSON}" >> $GITHUB_OUTPUT

  test-distribution:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        TEST_SCRIPT:
          - extra-only-distribution.sh
          - mirror-only-distribution.sh
          - upstream-only-distribution.sh
      fail-fast: false
    steps:
      - name: Print environment variables
        run: env
      - name: Set git login for tests
        run: |
          git config --global user.email "jax@nvidia.com"
          git config --global user.name "JAX-Toolbox CI"
      - name: Check out the repository under ${GITHUB_WORKSPACE}
        uses: actions/checkout@v3
      - name: Run integration test ${{ matrix.TEST_SCRIPT }}
        run: bash rosetta/tests/${{ matrix.TEST_SCRIPT }}

  test-jax:
    needs: build-jax
    if: inputs.ARCHITECTURE == 'amd64' # arm64 runners n/a
    uses: ./.github/workflows/_test_jax.yaml
    with:
      JAX_IMAGE: ${{ needs.build-jax.outputs.DOCKER_TAG_FINAL }}
    secrets: inherit

  test-te:
    needs: build-pax
    if: inputs.ARCHITECTURE == 'amd64' # arm64 runners n/a
    uses: ./.github/workflows/_test_te.yaml
    with:
      TE_IMAGE: ${{ needs.build-pax.outputs.DOCKER_TAG_FINAL }}
    secrets: inherit

  test-upstream-t5x:
    needs: build-t5x
    if: inputs.ARCHITECTURE == 'amd64' # arm64 runners n/a
    uses: ./.github/workflows/_test_t5x.yaml
    with:
      T5X_IMAGE: ${{ needs.build-t5x.outputs.DOCKER_TAG_FINAL }}
    secrets: inherit

  test-rosetta-t5x:
    needs: build-rosetta-t5x
    if: inputs.ARCHITECTURE == 'amd64' # no images for arm64
    uses: ./.github/workflows/_test_t5x_rosetta.yaml
    with:
      T5X_IMAGE: ${{ needs.build-rosetta-t5x.outputs.DOCKER_TAG_FINAL }}
    secrets: inherit

  test-pallas:
    needs: build-pallas
    if: inputs.ARCHITECTURE == 'amd64' # no images for arm64
    uses: ./.github/workflows/_test_pallas.yaml
    with:
      PALLAS_IMAGE: ${{ needs.build-pallas.outputs.DOCKER_TAG_FINAL }}
    secrets: inherit

  test-upstream-pax:
    needs: build-pax
    if: inputs.ARCHITECTURE == 'amd64' # no images for arm64
    uses: ./.github/workflows/_test_pax.yaml
    with:
      PAX_IMAGE: ${{ needs.build-pax.outputs.DOCKER_TAG_FINAL }}
    secrets: inherit

  test-rosetta-pax:
    needs: build-rosetta-pax
    if: inputs.ARCHITECTURE == 'amd64' # no images for arm64
    uses: ./.github/workflows/_test_pax_rosetta.yaml
    with:
      PAX_IMAGE: ${{ needs.build-rosetta-pax.outputs.DOCKER_TAG_FINAL }}
    secrets: inherit
  
  ## TODO: uncomments when PR #463
  # test-levanter:
  #   needs: build-levanter
  #   if: inputs.ARCHITECTURE == 'amd64'  # arm64 runners n/a
  #   uses: ./.github/workflows/_test_levanter.yaml
  #   with:
  #     JAX_IMAGE: ${{ needs.build-levanter.outputs.DOCKER_TAG_FINAL }}
  #   secrets: inherit

