name: ~publish images from internal to public repo

on:
  workflow_call:
    inputs:
      SOURCE_IMAGE:
        type: string
        description: 'Source docker image:'
        required: true
      TARGET_IMAGE:
        type: string
        description: 'Target docker image (jax/t5x/etc.):'
        required: true
      TARGET_TAGS:
        type: string
        description: 'Target docker tags in docker/metadata-action format:'
        required: true
    outputs:
      DOCKER_TAGS:
        description: "Tags of the image published"
        value: ${{ jobs.publish.outputs.DOCKER_TAGS }}

env:
  DOCKER_REGISTRY: 'ghcr.io/nvidia'

jobs:
  publish:
    runs-on: ubuntu-22.04
    outputs:
      DOCKER_TAGS: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ inputs.TARGET_IMAGE }}
          flavor: latest=false
          tags: ${{ inputs.TARGET_TAGS }}

      - name: Create manifest
        shell: bash -x -e {0}
        run: |
          # Extract manifests from the source image
          SOURCE_REPO=$(echo ${{ inputs.SOURCE_IMAGE }} | cut -d: -f1)
          MEDIA_TYPE=$(docker manifest inspect ${{ inputs.SOURCE_IMAGE }} | jq -r '.mediaType')
          case "$MEDIA_TYPE" in
            # OCI image index
            "application/vnd.oci.image.index.v1+json")
              MANIFESTS=$(
                docker manifest inspect ${{ inputs.SOURCE_IMAGE }} |\
                jq -r '.manifests[] | select(.platform.os == "linux") | .digest' |\
                xargs -I{} echo ${SOURCE_REPO}@{}
              )
              ;;
            # Docker image manifest
            "application/vnd.docker.distribution.manifest.v2+json")
              MANIFESTS=${{ inputs.SOURCE_IMAGE }}
              ;;
            *)
              echo "Unknown media type: $MEDIA_TYPE"
              exit 1
              ;;
          esac

          # Create new manifest list from extracted manifests
          for tag in $(echo "${{ steps.meta.outputs.tags }}"); do
            docker manifest create $tag $MANIFESTS
            docker manifest push $tag
          done

      - name: Generate outputs and artifacts
        shell: bash -x -e {0}
        run: |
          echo "${{ steps.meta.outputs.tags }}" > image-tags-${{ inputs.TARGET_IMAGE }}.txt

      - name: Upload image tags as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: image-tags-${{ inputs.TARGET_IMAGE }}
          path: image-tags-${{ inputs.TARGET_IMAGE }}.txt
