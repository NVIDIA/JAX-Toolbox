name: ~test TransformerEngine

on:
  workflow_call:
    inputs:
      TE_IMAGE:
        type: string
        description: 'JAX+TE+PAXML image'
        required: true
        default: 'ghcr.io/nvidia/upstream-pax:latest'
    outputs:
      UNIT_TEST_ARTIFACT_NAME:
        description: 'Name of the unit test artifact for downstream workflows'
        value: ${{ jobs.te-unit-tests.outputs.UNIT_TEST_ARTIFACT_NAME }}
      INTEGRATION_TEST_ARTIFACT_NAME:
        description: 'Name of the integration test artifact for downstream workflows'
        value: ${{ jobs.te-multi-gpu.outputs.INTEGRATION_TEST_ARTIFACT_NAME }}

env:
  UNIT_TEST_ARTIFACT_NAME: unit-test-logs
  INTEGRATION_TEST_ARTIFACT_NAME: integration-test-logs

jobs:
  te-unit-tests:
    runs-on: [self-hosted, V100]
    outputs:
      UNIT_TEST_ARTIFACT_NAME: ${{ env.UNIT_TEST_ARTIFACT_NAME }}
    steps:
      - name: Print environment variables
        run: env

      - name: Print GPU information
        run: nvidia-smi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull TE image
        shell: bash -x -e {0}
        run: |
          docker pull ${{ inputs.TE_IMAGE }}
          docker tag ${{ inputs.TE_IMAGE }} te:local

      - name: Run TE unit tests with docker
        shell: docker run --gpus all -v {0}:/cmd.sh -v /log:/log te:local bash -x /cmd.sh
        run: |
          pip install pytest-reportlog
          pytest --report-log=/log/report.jsonl ${SRC_PATH_TE}/tests/jax

      - name: Upload unit test json logs
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.UNIT_TEST_ARTIFACT_NAME }}
          path: /log/report.jsonl

  te-multi-gpu:
    strategy:
      matrix:
        N_GPU: [1, 2, 4, 8]
      fail-fast: false

    runs-on: ubuntu-22.04
    outputs:
      INTEGRATION_TEST_ARTIFACT_NAME: ${{ env.INTEGRATION_TEST_ARTIFACT_NAME }}

    steps:
      - name: Print environment variables
        run: env

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup SSH known hosts
        id: ssh-known-hosts
        run: |
          mkdir -p ~/.ssh
          cat >> ~/.ssh/known_hosts << EOF
          ${{ vars.SSH_KNOWN_HOSTS }}
          EOF
          chmod 600 ~/.ssh/known_hosts
          echo "FILE=$(realpath ~/.ssh/known_hosts)" >> $GITHUB_OUTPUT

      - name: Labels and metadata
        id: meta
        shell: bash -x -e {0}
        run: |
          PYXIS_IMAGE_NAME=${{ inputs.TE_IMAGE }}
          PYXIS_IMAGE_NAME=${PYXIS_IMAGE_NAME/ghcr.io\//ghcr.io#}
          TEST_CASE_NAME=1P${{ matrix.N_GPU }}G
          JOB_NAME=${GITHUB_RUN_ID}-${TEST_CASE_NAME}
          SLURM_LOG_FILE=/nfs/cluster/${JOB_NAME}.log
          PYTEST_LOG_FILE=/nfs/cluster/${JOB_NAME}-pytest.jsonl
          BATCH_SIZE=$((${{ inputs.BATCH_SIZE_PER_GPU }} * ${{ matrix.N_GPU }}))
          for var in PYXIS_IMAGE_NAME TEST_CASE_NAME JOB_NAME SLURM_LOG_FILE PYTEST_LOG_FILE BATCH_SIZE; do
            echo "$var=${!var}" >> $GITHUB_OUTPUT
          done

      - name: Submit SLURM jobs over SSH
        id: submit
        shell: bash -O expand_aliases -x -e {0}
        run: |
          alias sshx='ssh -o "ServerAliveInterval 7" ${{ secrets.CLUSTER_LOGIN_USER }}@${{ vars.HOSTNAME_SLURM_LOGIN }}'
          sshx "date && hostname && sinfo"
          JOB=$(sshx sbatch --parsable << EOF
          #!/bin/bash
          #SBATCH --job-name=${{ steps.meta.outputs.JOB_NAME }}
          #SBATCH --exclusive
          #SBATCH --nodes=1
          #SBATCH --tasks=1
          #SBATCH --gpus-per-node=${{ matrix.N_GPU }}
          #SBATCH --time=00:15:00
          #SBATCH --output=${{ steps.meta.outputs.SLURM_LOG_FILE }}
          #SBATCH --export="ENROOT_PASSWORD=${{ secrets.GITHUB_TOKEN }}"
          time srun \
            --container-image=${{ steps.meta.outputs.PYXIS_IMAGE_NAME }} \
            --container-mounts=$(dirname ${{ steps.meta.outputs.PYTEST_LOG_FILE }}):/output \
            --container-entrypoint \
            bash -e -x -c 'nvidia-smi
                     pip install pytest pytest-reportlog cuda-python
                     cd \${SRC_PATH_TE}/examples/jax/encoder
                     pip install -r requirements.txt
                     pytest --report-log=/output/$(basename ${{ steps.meta.outputs.PYTEST_LOG_FILE }}) \
                     test_single_gpu_encoder.py \
                     test_multigpu_encoder.py \
                     test_model_parallel_encoder.py'
          EOF
          )

          set +x
          while sshx squeue -j $JOB | grep -q $JOB; do
            echo "SLURM Job $JOB is still running."
            sleep 15
          done
          echo "SLRUM Job $JOB finished."
          set -x

      - name: Retrieve training logs
        shell: bash -x -e {0}
        run: |
          mkdir output/
          ssh ${{ secrets.CLUSTER_LOGIN_USER }}@${{ vars.HOSTNAME_SLURM_LOGIN }} "ls /nfs/cluster/${GITHUB_RUN_ID}*"
          rsync -rtz --progress \
            ${{ secrets.CLUSTER_LOGIN_USER }}@${{ vars.HOSTNAME_SLURM_LOGIN }}:${{ steps.meta.outputs.SLURM_LOG_FILE }} \
            output/${{ steps.meta.outputs.TEST_CASE_NAME }}.log
          cat output/${{ steps.meta.outputs.TEST_CASE_NAME }}.log

          rsync -rtz --progress \
            ${{ secrets.CLUSTER_LOGIN_USER }}@${{ vars.HOSTNAME_SLURM_LOGIN }}:${{ steps.meta.outputs.PYTEST_LOG_FILE }} \
            output/${{ steps.meta.outputs.TEST_CASE_NAME }}-pytest.jsonl

      - name: Upload training logs as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.INTEGRATION_TEST_ARTIFACT_NAME }}
          path: output/*
