name: ~test TransformerEngine

on:
  # Called from another workflow
  workflow_call:
    inputs:
      JAX_TE_IMAGE:
        type: string
        description: 'JAX-TE image build by NVIDIA/JAX-Toolbox'
        required: true
        default: 'ghcr.io/nvidia/jax-te:latest'

jobs:
  te-unit-tests:
    runs-on: [self-hosted, compute, V100]
    steps:
      - name: Print environment variables
        run: env

      - name: Print GPU information
        run: nvidia-smi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull JAX-TE image
        shell: bash -x -e {0}
        run: |
          docker pull ${{ inputs.JAX_TE_IMAGE }}
          docker tag ${{ inputs.JAX_TE_IMAGE }} jax:te

      - name: Run JAX-TE unit tests with docker
        shell: docker run --gpus all -v {0}:/cmd.sh -v /log:/log jax:te bash -x /cmd.sh
        run: |
          pip install pytest pytest-reportlog cuda-python
          TE_PATH=$(dirname $(python -c "import transformer_engine as te; print(*te.__path__)"))
          pytest --report-log=/log/report.jsonl ${TE_PATH}/tests/jax || true

      - name: Upload unit test json logs
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-logs
          path: /log/report.jsonl

  single-process-multi-device:
    strategy:
      matrix:
        N_GPU: [1, 2, 4, 8]
      fail-fast: false

    runs-on: ubuntu-22.04

    steps:
      - name: Print environment variables
        run: env

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add known SSH host
        shell: bash -x -e {0}
        run: |
          echo "150.230.212.101 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDcOJt0Q0qYfShF03/rFPYpq+muMHBIfMlvitzEsSm4onWkG4YU0NBvG5WKcU2dLoMdhCIy+SQYtDeNm9Lj5GIqsLSsVMBSAurIMAzyiJU3DuahiWQGMa3rOVEFzgRtmo58202Ijw61WwVi47OvzJL72Oy2RO8hqVvU0ojcQo1jiQxtj39u1Be7dzIXJHLs7xdpI7V8mGxwQ1dgcjcXSh43br9V24pAebK2abGD8KRZ1H0YDgyaYek0ub5AHAeeznL/FUs0lud1xicABd5qo+w1PyIA+1A+TkRTrbHCBtc2w9w3zaO4p+Yi/ITTjhtnPTAmTD7U+km2mhiR+dLbx15D" >> ~/.ssh/known_hosts
          echo "165.1.79.135 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC+/i0SQXfIUF/GVFFw4XbjPObOuI5Xe7ZYS8fxYtQGXVBnaGs+2qYpmNS2GNoMhAc/w6+uP0gNJcVj0TXNWtSJgXgagO6zVqD4xGSqNOU82PsqRiJvVzjA4nTcGrBdIzh6sLwgkjuGKKjF5XhCJ6BQwPH/GLS9b16eewi3Ppmxp1SKca2sXIUPLrCOpZ4RY/hiQm9vTUfmOWuijxQcbOGWtc6ghV1IJpyCZGtvakhr/nR1LFQmDdbJ7MtKyqmoBbeiEQmlht2a7FGVQY8KTZsVSpYUUHT2zwGLBqogRlaxbv3ANavklG06ZpQJtpf300nr6Ix1UpAedhVpuJVGVJR9kyGZHrll60tjTMzy5Kq3RmxjmF9b524Ig8gMmwIi1G+sU5+OUSzVNGzeuvAhSOwKbFLFq9n8nPdBYGh2MDSm4aIv3Zl/YmyM4Ts2OdKF/BWyqUaGtgz38zUWEbZ2QvnebiTGcBkjBC4b8yMCjTubIFanjUNOFWz4E6GWW5enh5c=" >> ~/.ssh/known_hosts

      - name: Labels and metadata
        id: meta
        shell: bash -x -e {0}
        run: |
          PYXIS_IMAGE_NAME=${{ inputs.JAX_TE_IMAGE }}
          PYXIS_IMAGE_NAME=${PYXIS_IMAGE_NAME/ghcr.io\//ghcr.io#}
          TEST_CASE_NAME=1P${{ matrix.N_GPU }}G
          JOB_NAME=${GITHUB_RUN_ID}-${TEST_CASE_NAME}
          SLURM_LOG_FILE=/nfs/cluster/${JOB_NAME}.log
          PYTEST_LOG_FILE=/nfs/cluster/${JOB_NAME}-pytest.jsonl
          BATCH_SIZE=$((${{ inputs.BATCH_SIZE_PER_GPU }} * ${{ matrix.N_GPU }}))
          for var in PYXIS_IMAGE_NAME TEST_CASE_NAME JOB_NAME SLURM_LOG_FILE PYTEST_LOG_FILE BATCH_SIZE; do
            echo "$var=${!var}" >> $GITHUB_OUTPUT
          done

      - name: Submit SLURM jobs over SSH
        id: submit
        shell: bash -O expand_aliases -x -e {0}
        run: |
          alias sshx='ssh -o "ServerAliveInterval 7" ${{ secrets.CLUSTER_LOGIN_USER }}@${{ secrets.CLUSTER_LOGIN_IP }}'
          sshx "date && hostname && sinfo"
          JOB=$(sshx sbatch --parsable << EOF
          #!/bin/bash
          #SBATCH --job-name=${{ steps.meta.outputs.JOB_NAME }}
          #SBATCH --exclusive
          #SBATCH --nodes=1
          #SBATCH --tasks=1
          #SBATCH --gpus-per-node=${{ matrix.N_GPU }}
          #SBATCH --time=00:05:00
          #SBATCH --output=${{ steps.meta.outputs.SLURM_LOG_FILE }}
          time srun \
            --container-image=${{ steps.meta.outputs.PYXIS_IMAGE_NAME }} \
            --container-mounts=$(dirname ${{ steps.meta.outputs.PYTEST_LOG_FILE }}):/output \
            --container-entrypoint \
            bash -e -x -c 'nvidia-smi
                     pip install pytest pytest-reportlog cuda-python
                     cd \$(dirname \$(python -c "import transformer_engine as te; print(*te.__path__)"))/examples/jax/encoder
                     pip install -r requirements.txt
                     pytest --report-log=/output/$(basename ${{ steps.meta.outputs.PYTEST_LOG_FILE }}) \
                     test_single_gpu_encoder.py \
                     test_multigpu_encoder.py \
                     test_model_parallel_encoder.py'
          EOF
          )

          set +x
          while sshx squeue -j $JOB | grep -q $JOB; do
            echo "SLURM Job $JOB is still running."
            sleep 15
          done
          echo "SLRUM Job $JOB finished."
          set -x

      - name: Retrieve training logs
        shell: bash -x -e {0}
        run: |
          mkdir output/
          ssh ${{ secrets.CLUSTER_LOGIN_USER }}@${{ secrets.CLUSTER_LOGIN_IP }} "ls /nfs/cluster/${GITHUB_RUN_ID}*"
          rsync -rtz --progress \
            ${{ secrets.CLUSTER_LOGIN_USER }}@${{ secrets.CLUSTER_LOGIN_IP }}:${{ steps.meta.outputs.SLURM_LOG_FILE }} \
            output/${{ steps.meta.outputs.TEST_CASE_NAME }}.log
          cat output/${{ steps.meta.outputs.TEST_CASE_NAME }}.log

          rsync -rtz --progress \
            ${{ secrets.CLUSTER_LOGIN_USER }}@${{ secrets.CLUSTER_LOGIN_IP }}:${{ steps.meta.outputs.PYTEST_LOG_FILE }} \
            output/${{ steps.meta.outputs.TEST_CASE_NAME }}-pytest.jsonl

      - name: Upload training logs as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.meta.outputs.JOB_NAME }}
          path: output/*
