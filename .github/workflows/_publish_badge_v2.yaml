name: ~publish test results into a shields.io endpoint json file

on:
  workflow_call:
    inputs:
      BADGE_FILES:
        type: string
        description: 'Name/bash regex for shields.io endpoint JSON files'
        default: '*badge*.json'
        required: false
    # outputs:
      # GIST_ID:
      #   description: 'Id of the GitHub Gist that hosts all endpoint JSON files'
      #   value: ${{ jobs.publish.outputs.STATUS }}

jobs:
  publish:
    runs-on: ubuntu-22.04
    # outputs:
    #   STATUS: ${{ steps.script.outputs.STATUS }}
    steps:
      - name: Download artifacts specified by input
        uses: actions/download-artifact@v3

      - name: Collect all badge files to temporary folder
        id: collect
        shell: bash -x -e {0}
        run: |
          workdir=$(mktemp -d)
          find -name "${{ inputs.BADGE_FILES }}" | while read -s f; do
            mv "$f" $workdir
          done
          echo "WORKDIR=$workdir" >> $GITHUB_OUTPUTS

      - name: Upload badge files to gist
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.NVJAX_GIST_TOKEN }}
          script: |
            const currentDateTime = new Date().toISOString();
            const gistDescription = 
              `Badge endpoint files from Workflow: ${{ github.workflow }}, ` +
              `Run ID: ${{ github.run_id }}, ` +
              `Repository: ${{ github.repository }}, ` +
              `Event: ${{ github.event_name }}, ` +
              `Created: ${currentDateTime}`;

            const fs = require('fs').promises;
            const files = await fs.readdir('${{ steps.collect.outputs.WORKDIR }}');

            gist = await github.rest.gists.create({
              description: gistDescription,
              public: false,
              files: Object.fromEntries(
                await Promise.all(
                  files.map(
                    async filename => {
                      const content = await fs.readFile(filename, 'utf8');
                      return [filename, { content }];
                    }
                  )
                )
              )
            });

            console.log(gist)
            // return gist.data.id;
