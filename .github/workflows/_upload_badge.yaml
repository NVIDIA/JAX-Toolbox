name: ~upload shields.io endpoint json files as a GitHub Gist

on:
  workflow_call:
    inputs:
      BADGE_FILES:
        type: string
        description: 'Name/bash regex for shields.io endpoint JSON files'
        default: '*badge*.json'
        required: false
    outputs:
      GIST_ID:
        description: 'Id of the created Gist'
        value: ${{ jobs.action.outputs.GIST_ID }}

jobs:
  action:
    runs-on: ubuntu-22.04
    outputs:
      GIST_ID: ${{ steps.extract-id.outputs.GIST_ID }}
    steps:
      - name: Download artifacts specified by input
        uses: actions/download-artifact@v3

      - name: Collect all badge files to temporary folder
        id: collect
        shell: bash -x -e {0}
        run: |
          workdir=$(mktemp -d)
          find -name "${{ inputs.BADGE_FILES }}" | while read -s f; do
            cp "$f" $workdir
          done
          echo "WORKDIR=$workdir" >> $GITHUB_OUTPUT

      - name: Upload badge files to gist
        id: upload
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.NVJAX_GIST_TOKEN }}
          script: |
            const currentDateTime = new Date().toISOString();
            const gistDescription = 
              `Badge endpoint files from Workflow: ${{ github.workflow }}, ` +
              `Run ID: ${{ github.run_id }}, ` +
              `Repository: ${{ github.repository }}, ` +
              `Event: ${{ github.event_name }}, ` +
              `Created: ${currentDateTime}`;

            const fs = require('fs').promises;
            const workdir = '${{ steps.collect.outputs.WORKDIR }}'
            const files = await fs.readdir(workdir);

            gist = await github.rest.gists.create({
              description: gistDescription,
              public: false,
              files: Object.fromEntries(
                await Promise.all(
                  files.map(
                    async filename => {
                      const content = await fs.readFile(`${workdir}/${filename}`, 'utf8');
                      return [filename, { content }];
                    }
                  )
                )
              )
            });

            console.log(gist)

            return gist.data.id;

      - name: Return Gist ID
        id: extract-id
        shell: bash -x -e {0}
        run: |
          GIST_ID="${{ steps.upload.outputs.result }}"
          echo "GIST_ID=${GIST_ID//\"/}" >> $GITHUB_OUTPUT
