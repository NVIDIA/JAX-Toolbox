name: ~build Pax container

on:
  workflow_call:
    inputs:
      ARCHITECTURE:
        type: string
        description: 'CPU architecture to build the image for, e.g. amd64, arm64'
        required: true
      BASE_IMAGE:
        type: string
        description: 'Base docker image that provides JAX'
        required: false
        default: ghcr.io/nvidia/jax:mealkit
      BUILD_DATE:
        type: string
        description: "Build date in YYYY-MM-DD format"
        required: false
        default: 'NOT SPECIFIED'
      REPO_PAXML:
        type: string
        description: URL of Paxml repository to check out
        required: false
        default: "https://github.com/google/paxml.git"
      REPO_PRAXIS:
        type: string
        description: URL of Praxis repository to check out
        required: false
        default: "https://github.com/google/praxis.git"
      REF_PAXML:
        type: string
        description: Git commit, tag, or branch for Paxml
        required: false
        default: main
      REF_PRAXIS:
        type: string
        description: Git commit, tag, or branch for Praxis
        required: false
        default: main
      ARTIFACT_NAME:
        type: string
        description: 'Name of the artifact zip file'
        required: false
        default: 'artifact-pax-build'
      BADGE_FILENAME:
        type: string
        description: 'Name of the endpoint JSON file for shields.io badge'
        required: false
        default: 'badge-pax-build'
    outputs:
      DOCKER_TAG_MEALKIT:
        description: "Tags of the 'mealkit' image built"
        value: ${{ jobs.build-pax.outputs.DOCKER_TAG_MEALKIT }}
      DOCKER_TAG_FINAL:
        description: "Tags of the complete image built"
        value: ${{ jobs.build-pax.outputs.DOCKER_TAG_FINAL }}

env:
  UPLD_IMAGE: ghcr.io/nvidia/jax-toolbox-internal

permissions:
  contents: read  # to fetch code
  actions:  write # to cancel previous workflows
  packages: write # to upload container

jobs:

  build-pax:
    runs-on: [self-hosted, "${{ inputs.ARCHITECTURE }}", small]
    env:
      BADGE_FILENAME_FULL: ${{ inputs.BADGE_FILENAME }}-${{ inputs.ARCHITECTURE }}.json
    outputs:
      DOCKER_TAG_MEALKIT: ${{ steps.mealkit-metadata.outputs.tags }}
      DOCKER_TAG_FINAL: ${{ steps.final-metadata.outputs.tags }}
    steps:
      - name: Print environment variables
        run: env

      - name: Check out the repository under ${GITHUB_WORKSPACE}
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.1

      - name: Set docker metadata - mealkit
        id: mealkit-metadata
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.UPLD_IMAGE }}
          flavor: |
            latest=false
          tags: |
            type=raw,value=${{ github.run_id }}-upstream-pax-${{ inputs.ARCHITECTURE }}-mealkit
          labels:
            org.opencontainers.image.created=${{ inputs.BUILD_DATE }}

      - name: Build mealkit image
        id: mealkit-build
        uses: docker/build-push-action@v4
        with:
          context: .github/container
          push: true
          file: .github/container/Dockerfile.pax.${{ inputs.ARCHITECTURE }}
          platforms: linux/${{ inputs.ARCHITECTURE }}
          target: mealkit
          tags: ${{ steps.mealkit-metadata.outputs.tags }}
          labels: ${{ steps.mealkit-metadata.outputs.labels }}
          build-args: |
            BASE_IMAGE=${{ inputs.BASE_IMAGE }}
            BUILD_DATE=${{ inputs.BUILD_DATE }}
            REPO_PAXML=${{ inputs.REPO_PAXML }}
            REPO_PRAXIS=${{ inputs.REPO_PRAXIS }}
            REF_PAXML=${{ inputs.REF_PAXML }}
            REF_PRAXIS=${{ inputs.REF_PRAXIS }}

      - name: Set docker metadata - final
        id: final-metadata
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.UPLD_IMAGE }}
          flavor: |
            latest=false
          tags: |
            type=raw,value=${{ github.run_id }}-upstream-pax-${{ inputs.ARCHITECTURE }}
          labels:
            org.opencontainers.image.created=${{ inputs.BUILD_DATE }}

      - name: Build final image
        id: final-build
        uses: docker/build-push-action@v4
        with:
          context: .github/container
          push: true
          file: .github/container/Dockerfile.pax.${{ inputs.ARCHITECTURE }}
          platforms: linux/${{ inputs.ARCHITECTURE }}
          target: final
          tags: ${{ steps.final-metadata.outputs.tags }}
          labels: ${{ steps.final-metadata.outputs.labels }}
          build-args: |
            BASE_IMAGE=${{ inputs.BASE_IMAGE }}
            BUILD_DATE=${{ inputs.BUILD_DATE }}
            REPO_PAXML=${{ inputs.REPO_PAXML }}
            REPO_PRAXIS=${{ inputs.REPO_PRAXIS }}
            REF_PAXML=${{ inputs.REF_PAXML }}
            REF_PRAXIS=${{ inputs.REF_PRAXIS }}

      - name: Generate sitrep
        if: success() || failure()
        shell: bash -x -e {0}
        run: |
          # bring in utility functions
          source .github/workflows/scripts/to_json.sh

          badge_label='PAX ${{ inputs.ARCHITECTURE }} build'
          tags="${{ steps.final-metadata.outputs.tags }}"
          digest="${{ steps.final-build.outputs.digest }}"
          outcome="${{ steps.final-build.outcome }}"

          if [[ ${outcome} == "success" ]]; then
            badge_message="pass"
            badge_color=brightgreen
            summary="PAX build on ${{ inputs.ARCHITECTURE }}: $badge_message"
          else
            badge_message="fail"
            badge_color=red
            summary="PAX build on ${{ inputs.ARCHITECTURE }}: $badge_message"
          fi

          to_json \
            summary \
            badge_label tags digest outcome \
          > sitrep.json

          schemaVersion=1 \
          label="${badge_label}" \
          message="${badge_message}" \
          color="${badge_color}" \
          to_json schemaVersion label message color \
          > ${{ env.BADGE_FILENAME_FULL }}

      - name: Upload sitrep and badge
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.ARTIFACT_NAME }}-${{ inputs.ARCHITECTURE }}
          path: |
            sitrep.json
            ${{ env.BADGE_FILENAME_FULL }}
