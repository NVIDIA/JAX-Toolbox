name: ~finalize workflow run with job report and badge updates

on:
  workflow_call:
    inputs:
      BUILD_DATE:
        type: string
        description: 'Date of the build'
        default: ''
        required: false
      PUBLISH_BADGE:
        type: boolean
        description: Update the landing page badges with run outcomes
        default: false
        required: false
      ARTIFACT_NAME:
        type: string
        description: 'Name of the artifact zip file'
        required: false
        default: 'artifact-final-report'
jobs:
  # create shields.io badge endpoint JSON for workflow metadata
  workflow-badge:
    runs-on: ubuntu-22.04
    env:
      ARTIFACT_NAME: 'artifact-workflow-metadata'
      BADGE_FILENAME: 'badge-workflow-metadata.json'
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Generate badge
        shell: bash -x -e {0}
        run: |
          # bring in utility functions
          source .github/workflows/scripts/to_json.sh

          badge_label='workflow metadata'
          if [[ -n "${{ inputs.BUILD_DATE }}" ]]; then
            badge_message="${{ inputs.BUILD_DATE }}: run #${{ github.run_id }}"
          else
            badge_message="run #${{ github.run_id }}"
          fi

          schemaVersion=1 \
          label="${badge_label}" \
          message="${badge_message}" \
          color="bisque" \
          to_json schemaVersion label message color \
          > ${{ env.BADGE_FILENAME }}

      - name: Upload sitrep and badge
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            ${{ env.BADGE_FILENAME }}

  upload-badge:
    runs-on: ubuntu-22.04
    needs: [workflow-badge]
    env:
      # Name/bash regex for shields.io endpoint JSON files
      BADGE_FILES: '*badge*.json'
      MARKDOWN_FILES: '*.md'
    outputs:
      GIST_ID: ${{ steps.extract-id.outputs.GIST_ID }}
    steps:
      - name: Download artifacts specified by input
        uses: actions/download-artifact@v4

      - name: Collect all badge files to temporary folder
        id: collect
        shell: bash -x -e {0}
        run: |
          workdir=$(mktemp -d)
          find -name "${BADGE_FILES}" -or -name "${MARKDOWN_FILES}" | while read -s f; do
            cp "$f" $workdir
          done
          echo "WORKDIR=$workdir" >> $GITHUB_OUTPUT

      - name: Upload badge files to gist
        id: upload
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.NVJAX_GIST_TOKEN }}
          script: |
            const currentDateTime = new Date().toISOString();
            const gistDescription =
              `Badge endpoint files from Workflow: ${{ github.workflow }}, ` +
              `Run ID: ${{ github.run_id }}, ` +
              `Repository: ${{ github.repository }}, ` +
              `Event: ${{ github.event_name }}, ` +
              `Created: ${currentDateTime}`;

            const fs = require('fs').promises;
            const workdir = '${{ steps.collect.outputs.WORKDIR }}'
            const files = await fs.readdir(workdir);

            gist = await github.rest.gists.create({
              description: gistDescription,
              public: false,
              files: Object.fromEntries(
                await Promise.all(
                  files.map(
                    async filename => {
                      const content = await fs.readFile(`${workdir}/${filename}`, 'utf8');
                      return [filename, { content }];
                    }
                  )
                )
              )
            });

            console.log(gist)

            return gist.data.id;

      - name: Return Gist ID
        id: extract-id
        shell: bash -x -e {0}
        run: |
          GIST_ID="${{ steps.upload.outputs.result }}"
          echo "GIST_ID=${GIST_ID//\"/}" >> $GITHUB_OUTPUT

  report:
    runs-on: ubuntu-22.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Write output to step summary
        shell: bash -x -e {0}
        run: |
          find -name "sitrep.json" | while read -s f; do
            cat "$f" | jq -r '.summary' | tee -a $GITHUB_STEP_SUMMARY
          done

      - name: Concatenate all sitreps
        shell: bash -x -e {0}
        run: |
          # combine all sitreps files into a single file, where each sitrep json sits
          # in a field named by the folder that contained it
          echo "[" >> fsitrep.json
          sitrep_files=($(find . -name "sitrep.json"))
          total_files=${#sitrep_files[@]}

          # parse all the sitrep files and consolidate them into one
          for ((i=0; i<total_files; i++)); do
            FILE=${sitrep_files[$i]}
            # Extract directory name
            key=$(dirname "$FILE")
            # Extract the summary field from the JSON files and append the content to the output JSON file.
            if [[ "$key" == "./artifact-t5x-mgmn-test" || "$key" == "./artifact-pax-mgmn-test" ]]; then 
              val_tmp=$(cat "$FILE" |  jq -r '.summary' )
              # For t5x/pax mgmn test extract the test summary of tests and ignore extended metric info in the summary.
              delimiter="|"
              IFS=$delimiter read -ra parts <<< "$val_tmp" 
              value="${parts[0]}passed"
            else
              value=$(cat "$FILE" |  jq -r '.summary' )
            fi

            jq -n --arg key "$key" --arg value "$value" '{ ($key): $value }' >> fsitrep.json
            if [ $i != $((total_files-1)) ]; then
              echo -n "," >> fsitrep.json
            fi
          done
          echo "]" >> fsitrep.json
          mv fsitrep.json sitrep.json
          
      - name: Upload training logs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.ARTIFACT_NAME }}
          path: ./sitrep.json

  publish-badge:
    needs: [upload-badge]
    runs-on: ubuntu-22.04
    env:
      # Name/bash regex for shields.io endpoint JSON files
      PUBLISH_BADGE_FILES: '(.*badge.*\.json|.*\.md)'
    steps:
      - name: copy badge to primary Gist
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.NVJAX_GIST_TOKEN }}
          script: |
            const srcId = "${{ needs.upload-badge.outputs.GIST_ID }}";
            const dstId = "${{ inputs.PUBLISH_BADGE && vars.BADGE_ENDPOINT_GIST_ID || vars.MOCK_BADGE_ENDPOINT_GIST_ID }}";
            const { PUBLISH_BADGE_FILES } = process.env;

            // Fetch existing files from destination gist
            const { data: dstData } = await github.rest.gists.get({
              gist_id: dstId
            });

            // Mark existing files in destination gist for deletion
            let filesToUpdate = {};
            for (const filename of Object.keys(dstData.files)) {
              filesToUpdate[filename] = null;
            }

            // Fetch files from source gist
            const { data: srcData } = await github.rest.gists.get({
              gist_id: srcId
            });

            // Add or update files based on the pattern
            const pattern = new RegExp(`${PUBLISH_BADGE_FILES}`);
            for (const [filename, fileObj] of Object.entries(srcData.files)) {
              if (filename.match(pattern)) {
                filesToUpdate[filename] = {
                  content: fileObj.content
                };
              }
            }

            // Update files in destination gist
            await github.rest.gists.update({
              gist_id: dstId,
              files: filesToUpdate
            });
            console.log("Files copied successfully.");
            console.log(Object.keys(filesToUpdate));
