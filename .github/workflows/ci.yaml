name: CI

on:
  schedule:
    - cron: '30 9 * * *'  # Pacific Time 01:30 AM in UTC
  pull_request:
    paths-ignore:
      - '**.md'
  workflow_dispatch:
    inputs:
      PUBLISH:
        type: boolean
        description: Publish dated images and update the 'latest' tag?
        default: false
        required: false
      BUMP_MANIFEST:
        type: boolean
        description: Bump git repos in manifest.yaml to head of tree?
        default: false
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

permissions:
  contents: read  # to fetch code
  actions:  write # to cancel previous workflows
  packages: write # to upload container

jobs:

  metadata:
    runs-on: ubuntu-22.04
    outputs:
      BUILD_DATE: ${{ steps.date.outputs.BUILD_DATE }}
      PUBLISH: ${{ steps.if-publish.outputs.PUBLISH }}
      BUMP_MANIFEST: ${{ steps.if-bump-manifest.outputs.BUMP_MANIFEST }}
    steps:
      - name: Set build date
        id: date
        shell: bash -x -e {0}
        run: |
          BUILD_DATE=$(TZ='US/Los_Angeles' date '+%Y-%m-%d')
          echo "BUILD_DATE=${BUILD_DATE}" >> $GITHUB_OUTPUT

      - name: Determine whether results will be 'published'
        id: if-publish
        shell: bash -x -e {0}
        run: |
          echo "PUBLISH=${{ github.event_name == 'schedule' || inputs.PUBLISH }}" >> $GITHUB_OUTPUT

      - name: Determine whether need to bump manifest 
        id: if-bump-manifest
        shell: bash -x -e {0}
        run: |
          echo "BUMP_MANIFEST=${{ github.event_name == 'schedule' || inputs.BUMP_MANIFEST }}" >> $GITHUB_OUTPUT

  amd64:
    needs: metadata
    uses: ./.github/workflows/_ci.yaml
    with:
      ARCHITECTURE: amd64
      BUILD_DATE: ${{ needs.metadata.outputs.BUILD_DATE }}
      BUMP_MANIFEST: ${{ needs.metadata.outputs.BUMP_MANIFEST == 'true' }}
    secrets: inherit

  arm64:
    needs: metadata
    uses: ./.github/workflows/_ci.yaml
    with:
      ARCHITECTURE: arm64
      BUILD_DATE: ${{ needs.metadata.outputs.BUILD_DATE }}
      BUMP_MANIFEST: ${{ needs.metadata.outputs.BUMP_MANIFEST == 'true' }}      
    secrets: inherit

  nightly-publish-config:
    runs-on: ubuntu-22.04
    if:  ${{ !cancelled() && needs.metadata.outputs.PUBLISH }}
    needs:
      - metadata
      - amd64
      - arm64
    outputs:
      CONFIGS: ${{ steps.generate-configs.outputs.CONFIGS }}
    steps:
      - id: generate-configs
        shell: bash -exu -o pipefail {0}
        run: |
          declare -a FLAVORS=(
            jax
            pallas
            maxtext
            levanter
            t5x
            pax
            rosetta-t5x
            rosetta-pax
          )
          declare -a STAGES=(
            mealkit
            final
          )

          # create a JSON list, where each item is for a target/flavor pair in the form of {"source_image": [...], "target_tags": [...]}
          # dependency job `amd64` and `arm64` should have outputs.TAGS set as a dict of stage-flavor-priority to tag
          TAGS_MULTIARCH=$(echo ${{ needs.amd64.outputs.TAGS }} ${{ needs.arm64.outputs.TAGS }} | jq -s 'add')

          CONFIGS="[]"
          for flavor in "${FLAVORS[@]}";do
            for stage in "${STAGES[@]}"; do

              priority=$(
                echo "$TAGS_MULTIARCH" |\
                jq -r ".[] | select(.stage == \"${stage}\" and .flavor == \"${flavor}\") | .priority" |\
                jq -s 'max'
              )

              source_image=$(
                echo "$TAGS_MULTIARCH" |\
                jq -c "[.[] | select(.stage == \"${stage}\" and .flavor == \"${flavor}\") | .tag]"
              )

              case ${stage} in
                mealkit)
                  target_image=jax-mealkit
                  ;;
                final)
                  target_image=jax
                  ;;
              esac

              target_tags=$(
                cat <<EOF | jq -c
                [\
                  "type=raw,value=${flavor},priority=${priority}",\
                  "type=raw,value=${flavor}-${{ needs.metadata.outputs.BUILD_DATE }},priority=${priority}",\
                ]
                EOF
              )

              CONFIGS=$(
                echo ${CONFIGS} | jq ". + [{
                  \"source_image\": [\"${{ needs.amd64.outputs.DOCKER_TAGS }}\"],
                  \"target_tags\": [\"${{ needs.arm64.outputs.DOCKER_TAGS }}\"]
                }]"
              )

              
                  # CONTAINER_TAG=${flavor}
                  # TAG_DATED=${flavor}
                  # if [[ ${flavor} == "final" ]]; then
                  #     CONTAINER_TAG=latest
                  #     TAG_DATED=nightly
                  # fi
                  # JSON=$(echo ${JSON}\"${target}-${flavor}-container-tag\":\"${CONTAINER_TAG}\",)
                  # JSON=$(echo ${JSON}\"${target}-${flavor}-tag-dated\":\"${TAG_DATED}\",)
            done
          done

          CONFIGS=$(echo "$CONFIGS" | jq '{"config": .}')
          echo "CONFIGS='${CONFIGS}'" | tee -a $GITHUB_OUTPUT

        # ${{ fromJson(needs.amd64.outputs.DOCKER_TAGS)[format('tag-{0}-{1}', matrix.TARGET_IMAGE, matrix.FLAVOR)] }}
        # ${{ fromJson(needs.arm64.outputs.DOCKER_TAGS)[format('tag-{0}-{1}', matrix.TARGET_IMAGE, matrix.FLAVOR)] }}
        # type=raw,value=${{ fromJson(needs.publish-target-tags.outputs.TARGET_TAGS)[format('{0}-{1}-container-tag', matrix.TARGET_IMAGE, matrix.FLAVOR)] }},priority=500
        # type=raw,value=${{ fromJson(needs.publish-target-tags.outputs.TARGET_TAGS)[format('{0}-{1}-tag-dated', matrix.TARGET_IMAGE, matrix.FLAVOR)] }}-${{ needs.metadata.outputs.BUILD_DATE }},priority=500

  nightly-publish:
    needs: [nightly-publish-config]
    if:  ${{ !cancelled() && needs.metadata.outputs.PUBLISH }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.nightly-publish-config.outputs.CONFIG) }}      
    uses: ./.github/workflows/_publish_container.yaml
    with:
      SOURCE_IMAGE: ${{ matrix.config.source_image }}
      TARGET_IMAGE: jax
      TARGET_TAGS: ${{ matrix.config.target_tags }}

  finalize:
    needs: [amd64, arm64]
    if: "!cancelled()"
    uses: ./.github/workflows/_finalize.yaml
    with:
      PUBLISH_BADGE: false
    secrets: inherit
