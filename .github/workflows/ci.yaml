name: CI

on:
  pull_request:
    paths-ignore:
      - '**.md'
  workflow_dispatch:
    inputs:
      CUDA_IMAGE:
        type: string
        description: 'Base CUDA image, e.g. nvidia/cuda:X.Y.Z-devel-ubuntu22.04'
        required: false
        default: 'latest'
      SRC_JAX:
        description: 'JAX source: <repo>#<branch|tag|commit>'
        type: string
        required: true
        default: 'https://github.com/google/jax.git#main'
      SRC_XLA:
        description: 'XLA source: <repo>#<branch|tag|commit>'
        type: string
        required: true
        default: 'https://github.com/openxla/xla.git#main'
      SRC_TE:
        description: 'TE source: <repo>#<branch|tag|commit>'
        type: string
        required: true
        default: 'https://github.com/NVIDIA/TransformerEngine.git#main'
      SRC_T5X:
        description: 'T5X source: <repo>#<branch|tag|commit>'
        type: string
        required: true
        default: 'https://github.com/google-research/t5x.git#main'
      SRC_PAXML:
        description: 'Paxml source: <repo>#<branch|tag|commit>'
        type: string
        required: true
        default: 'https://github.com/google/paxml.git#main'
      SRC_PRAXIS:
        description: 'Praxis source: <repo>#<branch|tag|commit>'
        type: string
        required: true
        default: 'https://github.com/google/praxis.git#main'

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

permissions:
  contents: read  # to fetch code
  actions:  write # to cancel previous workflows
  packages: write # to upload container

jobs:

  amd64:
    uses: ./.github/workflows/_ci_amd64.yaml
    with:
      CUDA_IMAGE: ${{ inputs.CUDA_IMAGE || 'latest' }}
      SRC_JAX: ${{ inputs.SRC_JAX || 'https://github.com/google/jax.git#main' }}
      SRC_XLA: ${{ inputs.SRC_XLA || 'https://github.com/openxla/xla.git#main'}}
      SRC_TE: ${{ inputs.SRC_TE || 'https://github.com/NVIDIA/TransformerEngine.git#main'}}
      SRC_T5X: ${{ inputs.SRC_T5X || 'https://github.com/google-research/t5x.git#main'}}
      SRC_PAXML: ${{ inputs.SRC_PAXML || 'https://github.com/google/paxml.git#main'}}
      SRC_PRAXIS: ${{ inputs.SRC_PRAXIS || 'https://github.com/google/praxis.git#main'}}
    secrets: inherit
 
  arm64:
    uses: ./.github/workflows/_ci_arm64.yaml
    with:
      CUDA_IMAGE: ${{ inputs.CUDA_IMAGE || 'latest' }}
      SRC_JAX: ${{ inputs.SRC_JAX || 'https://github.com/google/jax.git#main' }}
      SRC_XLA: ${{ inputs.SRC_XLA || 'https://github.com/openxla/xla.git#main'}}
      SRC_TE: ${{ inputs.SRC_TE || 'https://github.com/NVIDIA/TransformerEngine.git#main'}}
      SRC_T5X: ${{ inputs.SRC_T5X || 'https://github.com/google-research/t5x.git#main'}}
      SRC_PAXML: ${{ inputs.SRC_PAXML || 'https://github.com/google/paxml.git#main'}}
      SRC_PRAXIS: ${{ inputs.SRC_PRAXIS || 'https://github.com/google/praxis.git#main'}}
    secrets: inherit

  build-summary:
    needs: [amd64, arm64]
    if: always()
    runs-on: ubuntu-22.04
    steps:
      - name: Generate job summary for container build
        shell: bash -x -e {0}
        run: |
          cat > $GITHUB_STEP_SUMMARY << EOF
          # Images created          

          | Image        | Link                                               |
          | ------------ | -------------------------------------------------- |
          | Base         | ${{ needs.amd64.outputs.TAG_BASE }}                |
          |              | ${{ needs.arm64.outputs.TAG_BASE }}                |
          | JAX          | ${{ needs.amd64.outputs.TAG_JAX }}                 |
          |              | ${{ needs.arm64.outputs.TAG_JAX }}                 |
          | T5X          | ${{ needs.amd64.outputs.TAG_T5X }}                 |
          |              | ${{ needs.arm64.outputs.TAG_T5X }}                 |
          | PAX          | ${{ needs.amd64.outputs.TAG_PAX }}                 |
          |              | ${{ needs.arm64.outputs.TAG_PAX }}                 |
          EOF

          # | ROSETTA(t5x) | ${{ needs.build-rosetta-t5x.outputs.DOCKER_TAGS }} |
          # | ROSETTA(pax) | ${{ needs.build-rosetta-pax.outputs.DOCKER_TAGS }} |

  finalize:
    if: always()
    # TODO: use dynamic matrix to make dependencies self-updating
    needs: [build-summary, test-distribution, test-jax, test-te, test-t5x, test-pax]
    uses: ./.github/workflows/_finalize.yaml
    with:
      PUBLISH_BADGE: false
    secrets: inherit
