name: "~Sandbox"

on:
  workflow_dispatch:

jobs:
  sandbox:
    uses: ./.github/workflows/_test_unit.yaml
    with:
      TEST_NAME: nsys-jax
      EXECUTE: |
        set -o pipefail
        IMAGE_NAME=ghcr.io/nvidia/jax-toolbox-internal:10352352914-maxtext-amd64
        # Test cases:
        # - 1 node, profiled from the beginning
        # - 1 node, with targeted collection that's too short
        # - 1 node, with targeted collection that's sufficient
        # - multi-GPU
        # in principle all of them with/without analysis recipes,
        # but probably not worth actually doing that
        nvidia-smi
        num_failures=0
        for mode in single-gpu multi-gpu multi-gpu-multi-process; do
          DOCKER="docker run --shm-size=1g -v ${PWD}:/opt/output"
          if [[ "${mode}" != "single-gpu" ]]; then
            DOCKER+=" --gpus all"
          fi
          DOCKER+=" ${IMAGE_NAME}"
          if [[ "${mode}" == "multi-gpu-multi-process" ]]; then
            INIT_ARGS=" --multiprocess"
          fi
          NSYS_JAX="nsys-jax --nsys-jax-analysis summary"
          for collection in full partial; do
            TEST_ARGS=""
            if [[ "${collection}" == "partial" ]]; then
              NSYS_JAX+=" --capture-range=cudaProfilerApi --capture-range-end=stop"
              # nvbug/4801401
              NSYS_JAX+=" --sample=none"
              TEST_ARGS='--additional-args "profiler=nsys skip_first_n_steps_for_profiler=4 profiler_steps=5"'
            fi
            NSYS_JAX+=" --output=/opt/output/${mode}-${collection}-execution.zip"
            COMMAND="${NSYS_JAX} -- test-maxtext.sh ${TEST_ARGS} ${INIT_ARGS}"
            ${DOCKER} ${COMMAND} |& tee ${mode}-${collection}-execution.log
            num_failures=$((num_failures + ($? != 0)))
          done
        done
        exit $num_failures

  """Jax distributed initialize for GPUs."""
  if os.environ.get("JAX_COORDINATOR_IP") is not None:
    coordinator_ip = str(os.getenv("JAX_COORDINATOR_IP"))
    coordinator_port = str(os.getenv("JAX_COORDINATOR_PORT"))
    jax.distributed.initialize(
        coordinator_address=f"{coordinator_ip}:{coordinator_port}",
        num_processes=int(os.getenv("NNODES")),
        process_id=int(os.getenv("NODE_RANK")),

        ls -R .
        exit $num_failures
      STATISTICS_SCRIPT: |
        # errors=$(cat test-*.log | grep -c 'ERROR:' || true)
        # failed_tests=$(cat test-*.log | grep -c 'FAILED in' || true)
        # passed_tests=$(cat test-*.log | grep -c 'PASSED in' || true)
        # total_tests=$((failed_tests + passed_tests))
        # echo "TOTAL_TESTS=${total_tests}" >> $GITHUB_OUTPUT
        # echo "ERRORS=${errors}" >> $GITHUB_OUTPUT
        # echo "PASSED_TESTS=${passed_tests}" >> $GITHUB_OUTPUT
        # echo "FAILED_TESTS=${failed_tests}" >> $GITHUB_OUTPUT
        echo "TOTAL_TESTS=3" >> $GITHUB_OUTPUT
        echo "ERRORS=1" >> $GITHUB_OUTPUT
        echo "PASSED_TESTS=1" >> $GITHUB_OUTPUT
        echo "FAILED_TESTS=1" >> $GITHUB_OUTPUT
      ARTIFACTS: |
        full-execution.log
        partial-execution.log
    secrets: inherit
