name: ~publish pytest results into a json file that can be used to make badge

on:
  workflow_call:
    inputs:
      BADGE_LABEL:
        type: string
        description: 'Badge label:'
        required: true
      BADGE_FILENAME:
        type: string
        description: 'Filename to find the json in the gist for creating a badge:'
        required: true
      LOG_GLOB:
        type: string
        description: '(Recursive) glob to match pytest report logs assuming artifacts are downloaded in CWD:'
        required: true
        default: '**/*.jsonl'
      PUBLISH:
        type: boolean
        description: Update status badge?
        default: false
        required: true

env:
  LOCAL_PYTEST_LOG_DIR: pytest-logs

jobs:
  publish:
    runs-on: ubuntu-22.04
    steps:
      - name: Download all artifacts from the previous jobs
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.LOCAL_PYTEST_LOG_DIR }}

      - name: Count the number of failed tests
        shell: bash -O expand_aliases -x -e {0}
        run: |
          find ${{ env.LOCAL_PYTEST_LOG_DIR }} -type f
          alias cat_pytest_logs="cat ${{ env.LOCAL_PYTEST_LOG_DIR }}/${{ inputs.LOG_GLOB }}"
          all_outcomes() {
            cat_pytest_logs | jq -r '. | select((.["$report_type"] == "TestReport") and (.when == "call")) | .outcome'
          }
          cnt_type() {
            cat_pytest_logs | jq '. | select((.["$report_type"] == "TestReport") and (.when == "call") and (.outcome | contains("'${1}'"))) | .outcome' | wc -l
          }
          SKIPPED_TESTS=$(cnt_type skipped)
          FAILED_TESTS=$(cnt_type failed)
          PASSED_TESTS=$(cnt_type passed)
          TOTAL_TESTS=$(all_outcomes | wc -l)
          echo "Unit test breakdown:"
          all_outcomes | sort | uniq -c
          if [[ $FAILED_TESTS -eq 0 ]] && [[ $TOTAL_TESTS -gt 0 ]]; then
            BADGE_COLOR=brightgreen
          else
            if [[ $PASSED_TESTS -eq 0 ]]; then
              BADGE_COLOR=red
            else
              BADGE_COLOR=yellow
            fi
          fi
          cat > ${{ inputs.BADGE_FILENAME }} << EOF
          {
            "schemaVersion": 1,
            "label": "${{ inputs.BADGE_LABEL }}",
            "message": "${PASSED_TESTS}/${SKIPPED_TESTS}/${FAILED_TESTS} pass/skip/fail",
            "color": "${BADGE_COLOR}"
          }
          EOF

      - name: Upload badge artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.BADGE_FILENAME }}
          path: ${{ inputs.BADGE_FILENAME }}

      - name: Update status badge file in gist
        uses: actions/github-script@v5
        if: inputs.PUBLISH
        with:
          github-token: ${{ secrets.NVJAX_GIST_TOKEN }}
          script: |
            const fs = require('fs').promises;
            const gistId = "${{ vars.BADGE_ENDPOINT_GIST_ID }}";
            const filename = "${{ inputs.BADGE_FILENAME }}";
            const content = await fs.readFile(filename, 'utf8');

            const { data: gist } = await github.rest.gists.get({ gist_id: gistId });

            await github.rest.gists.update({
              gist_id: gistId,
              files: {
                [filename]: { content },
                ...Object.fromEntries(Object.entries(gist.files).filter(([name]) => name !== filename))
              }
            });
