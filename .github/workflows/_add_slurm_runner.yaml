name: ~create an ephemeral runner using a SLURM job

on:
  workflow_call:
    inputs:
      LABELS:
        type: string
        description: 'comma-separated list of runner labels'
        required: true
    # outputs:
    #   ARTIFACT_NAME:
    #     description: 'Name of the unit test artifact for downstream workflows'
    #     value: ${{ jobs.unit-test.outputs.ARTIFACT_NAME }}

jobs:

  start-runner:
    runs-on: ubuntu-latest
    steps:
      - name: Print environment variables
        run: env

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup SSH known hosts
        id: ssh-known-hosts
        run: |
          mkdir -p ~/.ssh
          cat >> ~/.ssh/known_hosts << EOF
          ${{ vars.SSH_KNOWN_HOSTS }}
          EOF
          chmod 600 ~/.ssh/known_hosts
          echo "FILE=$(realpath ~/.ssh/known_hosts)" >> $GITHUB_OUTPUT

      - name: Labels and metadata
        id: meta
        shell: bash -x -e {0}
        run: |
          JOB_NAME=${GITHUB_RUN_ID}
          LOG_FILE=/nfs/cluster/${JOB_NAME}.log
          for var in JOB_NAME LOG_FILE; do
            echo "$var=${!var}" >> $GITHUB_OUTPUT
          done

      - name: Obtain runner registration token
        uses: actions/github-script@v2.1.0
        id: runner-token
        with:
          github-token: ${{ secrets.TEST_TOKEN }}
          script: |
            const response = JSON.parse(
              await github.actions.createRegistrationTokenForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
              })
            );
            core.setSecret(response.token);
            core.setOutput('RUNNER_TOKEN', response.token);

      - name: Submit SLURM jobs over SSH
        id: submit
        shell: bash -O expand_aliases -x -e {0}
        run: |
          alias sshx='ssh -o "ServerAliveInterval 7" ${{ secrets.CLUSTER_LOGIN_USER }}@${{ vars.HOSTNAME_SLURM_LOGIN }}'
          JOB=$(sshx sbatch --parsable << EOF
          #!/bin/bash
          #SBATCH --job-name=RUNNER
          #SBATCH --exclusive
          #SBATCH --nodes=1
          #SBATCH --tasks=1
          #SBATCH --gpus-per-node=8
          #SBATCH --time=01:00:00
          #SBATCH --output=${{ steps.meta.outputs.LOG_FILE }}
          time docker run \
            --network host \
            --gpus all \
            --privileged \
            -v /runner \
            -e RUNNER_NAME=ABC \
            -e RUNNER_LABELS="A100,XYZ" \
            -e RUNNER_REPO="NVIDIA/JAX-Toolbox" \
            -e RUNNER_TOKEN=${{ steps.runner-token.outputs.RUNNER_TOKEN }} \
            -e RUNNER_EPHEMERAL=true \
            -e DOCKER_ENABLED=true \
            -e DOCKERD_IN_RUNNER=true \
            ghcr.io/nvidia/actions-runner-dind:ubuntu-22.04
          EOF
          )


# srun --pty docker run --network host --gpus all --privileged -v /runner -e RUNNER_NAME=ABC -e RUNNER_ORG=NVIDIA -e RUNNER_REPO=JAX-Toolbox -e RUNNER_TOKEN= ghcr.io/yhtang/actions-runner-dind:ubuntu-22.04-2023-07-17
# srun --pty docker run --network host --gpus all --privileged -v /runner -e RUNNER_NAME=ABC -e RUNNER_REPO="NVIDIA/JAX-Toolbox" -e RUNNER_TOKEN=XXXXX -e RUNNER_EPHEMERAL=true -e RUNNER_LABELS="A100,XYZ" -e DOCKER_ENABLED=true -e DOCKERD_IN_RUNNER=true  ghcr.io/yhtang/actions-runner-dind:ubuntu-22.04-2023-07-17