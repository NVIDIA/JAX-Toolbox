name: ~test Pax, MGMN

on:
  workflow_call:
    inputs:
      PAX_IMAGE:
        type: string
        description: PAX image from ghcr.io/nvidia/pax
        default: latest
        required: false

jobs:

  multi-gpu-multi-node:
    strategy:
      matrix:
        PARALLEL_CONFIG:
        - [1, 1, 1]
        - [8, 1, 1]
        - [1, 8, 1]
        - [2, 1, 4]
        - [16, 1, 1]
        - [2, 2, 4]
      fail-fast: false

    runs-on: ubuntu-22.04

    steps:
      - name: Print environment variables
        run: env

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add known SSH host
        shell: bash -x -e {0}
        run: |
          echo "150.230.212.101 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDcOJt0Q0qYfShF03/rFPYpq+muMHBIfMlvitzEsSm4onWkG4YU0NBvG5WKcU2dLoMdhCIy+SQYtDeNm9Lj5GIqsLSsVMBSAurIMAzyiJU3DuahiWQGMa3rOVEFzgRtmo58202Ijw61WwVi47OvzJL72Oy2RO8hqVvU0ojcQo1jiQxtj39u1Be7dzIXJHLs7xdpI7V8mGxwQ1dgcjcXSh43br9V24pAebK2abGD8KRZ1H0YDgyaYek0ub5AHAeeznL/FUs0lud1xicABd5qo+w1PyIA+1A+TkRTrbHCBtc2w9w3zaO4p+Yi/ITTjhtnPTAmTD7U+km2mhiR+dLbx15D" >> ~/.ssh/known_hosts
          echo "165.1.79.135 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC+/i0SQXfIUF/GVFFw4XbjPObOuI5Xe7ZYS8fxYtQGXVBnaGs+2qYpmNS2GNoMhAc/w6+uP0gNJcVj0TXNWtSJgXgagO6zVqD4xGSqNOU82PsqRiJvVzjA4nTcGrBdIzh6sLwgkjuGKKjF5XhCJ6BQwPH/GLS9b16eewi3Ppmxp1SKca2sXIUPLrCOpZ4RY/hiQm9vTUfmOWuijxQcbOGWtc6ghV1IJpyCZGtvakhr/nR1LFQmDdbJ7MtKyqmoBbeiEQmlht2a7FGVQY8KTZsVSpYUUHT2zwGLBqogRlaxbv3ANavklG06ZpQJtpf300nr6Ix1UpAedhVpuJVGVJR9kyGZHrll60tjTMzy5Kq3RmxjmF9b524Ig8gMmwIi1G+sU5+OUSzVNGzeuvAhSOwKbFLFq9n8nPdBYGh2MDSm4aIv3Zl/YmyM4Ts2OdKF/BWyqUaGtgz38zUWEbZ2QvnebiTGcBkjBC4b8yMCjTubIFanjUNOFWz4E6GWW5enh5c=" >> ~/.ssh/known_hosts

      - name: Labels and metadata
        id: meta
        shell: bash -x -e {0}
        run: |
          IMAGE="$(echo ${{inputs.PAX_IMAGE}} | sed 's/\//#/')"
          TEST_CASE_NAME=${{ matrix.PARALLEL_CONFIG[0] }}DP${{ matrix.PARALLEL_CONFIG[1] }}TP${{ matrix.PARALLEL_CONFIG[2] }}PP
          TOTAL_TASKS=$((${{ matrix.PARALLEL_CONFIG[0] }} * ${{ matrix.PARALLEL_CONFIG[1] }} * ${{ matrix.PARALLEL_CONFIG[2] }}))
          MAX_GPUS_PER_NODE=8
          NODES=$(((TOTAL_TASKS+MAX_GPUS_PER_NODE-1)/MAX_GPUS_PER_NODE))
          GPUS_PER_NODE=$((TOTAL_TASKS/NODES))

          JOB_NAME=${GITHUB_RUN_ID}-${TEST_CASE_NAME}
          LOG_FILE=/nfs/cluster/${JOB_NAME}.log
          MODEL_PATH=/nfs/cluster/${JOB_NAME}
          for var in IMAGE TEST_CASE_NAME TOTAL_TASKS NODES GPUS_PER_NODE JOB_NAME LOG_FILE MODEL_PATH; do
            echo "$var=${!var}" >> $GITHUB_OUTPUT
          done

      - name: Submit SLURM jobs over SSH
        id: submit
        shell: bash -O expand_aliases -x -e {0}
        run: |
          alias sshx='ssh -o "ServerAliveInterval 7" ${{ secrets.CLUSTER_LOGIN_USER }}@${{ secrets.CLUSTER_LOGIN_IP }}'
          sshx "date && hostname && sinfo" 
          sshx mkdir -p ${{ steps.meta.outputs.MODEL_PATH }}
          JOB=$(sshx sbatch --parsable << EOF
          #!/bin/bash
          #SBATCH --job-name=${{ steps.meta.outputs.JOB_NAME }}
          #SBATCH --exclusive
          #SBATCH --nodes=${{ steps.meta.outputs.NODES }}
          #SBATCH --gpus-per-node=${{ steps.meta.outputs.GPUS_PER_NODE }}
          #SBATCH --tasks=${{ steps.meta.outputs.TOTAL_TASKS }}
          #SBATCH --tasks-per-node=${{ steps.meta.outputs.GPUS_PER_NODE }}
          #SBATCH --time=00:30:00
          #SBATCH --output=${{ steps.meta.outputs.LOG_FILE }}
          #SBATCH --export="VOCAB_PATH=gs://t5-data/vocabs/cc_all.32000.100extra/sentencepiece.model,ENROOT_PASSWORD=${{ secrets.GITHUB_TOKEN }},NVCR_TOKEN=$${{ secrets.NVCR_TOKEN }}"
          time srun \
            --container-image=${{ steps.meta.outputs.IMAGE }} \
            --container-mounts=${{ steps.meta.outputs.MODEL_PATH }}:/output \
            --container-entrypoint \
            test-pax.sh \
              --output /output/${{ steps.meta.outputs.TEST_CASE_NAME }} \
              --dtype bfloat16 \
              --batch-per-gpu 4 \
              --steps 500 \
              --data-parallel ${{ matrix.PARALLEL_CONFIG[0] }} \
              --tensor-parallel ${{ matrix.PARALLEL_CONFIG[1] }} \
              --pipeline-parallel ${{ matrix.PARALLEL_CONFIG[2] }} \
              --nodes ${{ steps.meta.outputs.NODES }} \
              $([[ $TOTAL_TASKS > 1 ]] && echo --multiprocess)
          EOF
          )

          set +x
          while sshx squeue -j $JOB | grep -q $JOB; do
            echo "SLURM Job $JOB is still running."
            sleep 15
          done

          sshx rm -r ${{ steps.meta.outputs.MODEL_PATH }}/${{ steps.meta.outputs.TEST_CASE_NAME }}/checkpoints

          echo "SLRUM Job $JOB finished."
          set -x

      - name: Retrieve training logs and upload to TensorBoard server
        shell: bash -x -e {0}
        run: |
          mkdir output/
          rsync -rtz --progress \
            ${{ secrets.CLUSTER_LOGIN_USER }}@${{ secrets.CLUSTER_LOGIN_IP }}:${{ steps.meta.outputs.LOG_FILE }} \
            output/${{ steps.meta.outputs.TEST_CASE_NAME }}.log
          rsync -rtz --progress \
            ${{ secrets.CLUSTER_LOGIN_USER }}@${{ secrets.CLUSTER_LOGIN_IP }}:${{ steps.meta.outputs.MODEL_PATH }}/* \
            output/
          rsync -rtz --progress \
            output/* \
            ${{ secrets.TENSORBOARD_UPLOAD_USER }}@${{ vars.TENSORBOARD_SERVER_IP }}:/tensorboard-logs/${GITHUB_RUN_ID}

      - name: Upload training logs as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.meta.outputs.JOB_NAME }}
          path: output/*
