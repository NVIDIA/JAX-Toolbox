name: Nightly Rosetta Paxml build and test
run-name: Nightly Rosetta Paxml build and test (${{ github.event_name == 'workflow_run' && format('nightly {0}', github.event.workflow_run.created_at) || github.event_name }})

on:
  workflow_run:
    workflows: [Nightly Pax build]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      BASE_IMAGE:
        type: string
        description: 'PAX image built by NVIDIA/JAX-Toolbox'
        default: ''
        required: false
      PUBLISH:
        type: boolean
        description: Publish dated images and update the 'latest' tag?
        default: false
        required: false

env:
  BASE_LIBRARY: pax
  DOCKER_REGISTRY: ghcr.io/nvidia

permissions:
  contents: read  # to fetch code
  actions:  write # to cancel previous workflows
  packages: write # to upload container

jobs:

  metadata:
    runs-on: ubuntu-22.04
    outputs:
      BUILD_DATE: ${{ steps.date.outputs.BUILD_DATE }}
      BASE_LIBRARY: ${{ steps.base-metadata.outputs.BASE_LIBRARY }}
      BASE_IMAGE_AMD64: ${{ steps.base-metadata.outputs.BASE_IMAGE_AMD64 }}
      BASE_IMAGE_ARM64: ${{ steps.base-metadata.outputs.BASE_IMAGE_ARM64 }}
      PUBLISH: ${{ steps.if-publish.outputs.PUBLISH }}
    steps:
      - name: Check if the triggering workflow failed
        id: if-upstream-failed
        shell: bash -x -e {0}
        run: |
          echo "UPSTREAM_FAILED=${{ github.event.workflow_run.conclusion != 'success' }}" >> $GITHUB_OUTPUT

      - name: Cancel workflow if upstream workflow did not success
        if: ${{ steps.if-upstream-failed.outputs.UPSTREAM_FAILED == 'true' }}
        uses: styfle/cancel-workflow-action@0.12.0

      - name: Set build metadata
        id: meta-vars
        shell: bash -x -e {0}
        run: |
          BUILD_DATE=$(TZ='US/Los_Angeles' date '+%Y-%m-%d')
          echo "BUILD_DATE=${BUILD_DATE}" >> $GITHUB_OUTPUT

      - name: Set base library and image
        id: base-metadata
        shell: bash -x -e {0}
        run: |
          if [[ -z "${{ inputs.BASE_IMAGE }}" ]]; then
            BASE_IMAGE_AMD64=${{ env.DOCKER_REGISTRY }}/upstream-${{ env.BASE_LIBRARY }}:mealkit
            BASE_IMAGE_ARM64=${{ env.DOCKER_REGISTRY }}/upstream-${{ env.BASE_LIBRARY }}:mealkit
          else
            BASE_IMAGE_AMD64=${{ inputs.BASE_IMAGE }}-amd64-mealkit
            BASE_IMAGE_ARM64=${{ inputs.BASE_IMAGE }}-arm64-mealkit
          fi
          echo "BASE_LIBRARY=${{ env.BASE_LIBRARY }}" >> $GITHUB_OUTPUT
          echo "BASE_IMAGE_AMD64=${BASE_IMAGE_AMD64}" >> $GITHUB_OUTPUT
          echo "BASE_IMAGE_ARM64=${BASE_IMAGE_ARM64}" >> $GITHUB_OUTPUT
          # A container should be published if:
          # 1) the workflow is triggered by workflow_dispatch and the PUBLISH input is true, or
          # 2) the workflow is triggered by workflow_run (i.e., a nightly build)
          echo "PUBLISH=${{ github.event_name == 'workflow_run' || (github.event_name == 'workflow_dispatch' && inputs.PUBLISH) }}" >> $GITHUB_OUTPUT

  amd64:
    needs: metadata
    uses: ./.github/workflows/_build_rosetta.yaml
    with:
      ARCHITECTURE: amd64
      BUILD_DATE: ${{ needs.metadata.outputs.BUILD_DATE }}
      BASE_LIBRARY: ${{ needs.metadata.outputs.BASE_LIBRARY }}
      BASE_IMAGE: ${{ needs.metadata.outputs.BASE_IMAGE_AMD64 }}
    secrets: inherit

  arm64:
    needs: metadata
    uses: ./.github/workflows/_build_rosetta.yaml
    with:
      ARCHITECTURE: arm64
      BUILD_DATE: ${{ needs.metadata.outputs.BUILD_DATE }}
      BASE_LIBRARY: ${{ needs.metadata.outputs.BASE_LIBRARY }}
      BASE_IMAGE: ${{ needs.metadata.outputs.BASE_IMAGE_ARM64 }}
    secrets: inherit

  publish-build-badge:
    needs: [metadata, amd64, arm64]
    uses: ./.github/workflows/_publish_badge.yaml
    if: always()
      ENDPOINT_FILENAME: 'rosetta-pax-build-status.json'
      PUBLISH: ${{ needs.metadata.outputs.PUBLISH == 'true' }}
      SCRIPT: |
        if [[ ${{ needs.amd64.result }} == "success" && ${{ needs.arm64.result }} == "success" ]]; then
          BADGE_COLOR=brightgreen
          MSG=passing
          STATUS=success
        else
          BADGE_COLOR=red
          MSG=failing
          STATUS=failure
        fi
        echo "LABEL='nightly'" >> $GITHUB_OUTPUT
        echo "MESSAGE='${MSG}'" >> $GITHUB_OUTPUT
        echo "COLOR='${BADGE_COLOR}'" >> $GITHUB_OUTPUT
        echo "STATUS='${STATUS}'" >> ${GITHUB_OUTPUT}
  
  publish-mealkit:
    needs: [metadata, amd64, arm64]
    if: needs.metadata.outputs.PUBLISH == 'true'
    uses: ./.github/workflows/_publish_container.yaml
    with:
      SOURCE_IMAGE: |
        ${{ needs.amd64.outputs.DOCKER_TAG_MEALKIT }}
        ${{ needs.arm64.outputs.DOCKER_TAG_MEALKIT }}
      TARGET_IMAGE: pax
      TARGET_TAGS: |
        type=raw,value=mealkit,priority=500
        type=raw,value=mealkit-${{ needs.metadata.outputs.BUILD_DATE }},priority=500

  # TODO: Test ARM when runners available
  test-amd64:
    needs: amd64
    uses: ./.github/workflows/_test_pax_rosetta.yaml
    with:
      PAX_IMAGE: ${{ needs.amd64.outputs.DOCKER_TAG_FINAL }}
    secrets: inherit

  # TODO: ARM Tests
  publish-final:
    needs: [metadata, amd64, arm64, test-amd64]
    if: needs.metadata.outputs.PUBLISH == 'true'
    uses: ./.github/workflows/_publish_container.yaml
    with:
      SOURCE_IMAGE: |
        ${{ needs.amd64.outputs.DOCKER_TAG_FINAL }}
        ${{ needs.arm64.outputs.DOCKER_TAG_FINAL }}
      TARGET_IMAGE: pax
      TARGET_TAGS: |
        ${{ needs.test-amd64.outputs.TEST_STATUS == 'success' && 'type=raw,value=latest,priority=1000' || '' }}
        type=raw,value=nightly-${{ needs.metadata.outputs.BUILD_DATE }},priority=900

  publish-test-badge:
    needs: [metadata, publish-build-badge, test-amd64]
    uses: ./.github/workflows/_publish_badge.yaml
    if: always()
    secrets: inherit
    with:
      ENDPOINT_FILENAME: 'rosetta-pax-overall-test-status.json'
      PUBLISH: ${{ needs.metadata.outputs.PUBLISH == 'true' }}
      SCRIPT: |
        PAX_STATUS=${{ needs.test-amd64.outputs.TEST_STATUS }}

        echo "LABEL='Tests'" >> $GITHUB_OUTPUT

        STATUS=failure
        if [[ ${{ needs.amd64.result }} == "success" && ${{ needs.arm64.result }} == "success" ]]; then
          if [[ $PAX_STATUS == "success" ]]; then
            COLOR=brightgreen
            MESSAGE="MGMN passed"
            STATUS=success
          else
            COLOR=red
            MESSAGE="MGMN failed"
          fi
        else
          COLOR="red"
          MESSAGE="n/a"
        fi

        echo "COLOR='${COLOR}'" >> $GITHUB_OUTPUT
        echo "MESSAGE='${MESSAGE}'" >> $GITHUB_OUTPUT
        echo "STATUS='${STATUS}'" >> ${GITHUB_OUTPUT}

  finalize:
    if: always()
    needs: [metadata, amd64, arm64, test-amd64]
    uses: ./.github/workflows/_finalize.yaml
    with:
      PUBLISH_BADGE: ${{ needs.metadata.outputs.PUBLISH == 'true' }}
    secrets: inherit
