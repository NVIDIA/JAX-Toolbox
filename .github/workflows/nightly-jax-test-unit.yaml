name: Nightly JAX unit test

on:
  workflow_run:
    workflows: [Nightly JAX build]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      JAX_IMAGE:
        type: string
        description: 'JAX image built by NVIDIA/JAX-Toolbox'
        default: 'ghcr.io/nvidia/jax:latest'
        required: true
      PUBLISH:
        type: boolean
        description: Update status badge?
        default: false
        required: true

permissions:
  contents: read  # to fetch code
  actions:  write # to cancel previous workflows
  packages: write # to upload container

env:
  DEFAULT_JAX_IMAGE: 'ghcr.io/nvidia/jax:latest'

jobs:

  if-upstream-failed:
    if: (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'failure') && github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - run: echo 'Upstream workflow failed, aborting run' && exit 1

  metadata:
    runs-on: ubuntu-22.04
    outputs:
      JAX_IMAGE: ${{ steps.meta.outputs.JAX_IMAGE }}
      PUBLISH: ${{ steps.meta.outputs.PUBLISH }}
    steps:
      - name: Set metadata
        id: meta
        shell: bash -x -e {0}
        run: |
          if [[ -z "${{ inputs.JAX_IMAGE }}" ]]; then
            JAX_IMAGE=${{ env.DEFAULT_JAX_IMAGE }}
          else
            JAX_IMAGE=${{ inputs.JAX_IMAGE }}
          fi
          echo "JAX_IMAGE=${JAX_IMAGE}" >> $GITHUB_OUTPUT
          echo "PUBLISH=${{ inputs.PUBLISH }}" >> $GITHUB_OUTPUT

  run-jobs:
    needs: metadata
    uses: ./.github/workflows/_test_jax.yaml
    if: (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') || github.event_name == 'workflow_dispatch'
    with:
      JAX_IMAGE: ${{ needs.metadata.outputs.JAX_IMAGE }}
    secrets: inherit

  summary:
    needs: [run-jobs]
    runs-on: ubuntu-22.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Write output to step summary
        shell: bash -x -e {0}
        run: |
          find -name "sitrep.json" | while read -s f; do
            cat "$f" | jq -r '.summary' | tee -a $GITHUB_STEP_SUMMARY
          done

  upload-badge:
    needs: [run-jobs]
    uses: ./.github/workflows/_upload_badge.yaml
    secrets: inherit

  publish-badge:
    needs: [metadata, upload-badge]
    if: github.event_name == 'workflow_run' || needs.metadata.outputs.PUBLISH == 'true'
    runs-on: ubuntu-22.04
    steps:
      - name: copy badge to primary Gist
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.NVJAX_GIST_TOKEN }}
          script: |
            const srcId = "${{ needs.upload-badge.outputs.GIST_ID }}";
            const dstId = "${{ vars.BADGE_ENDPOINT_GIST_ID }}";

            // Fetch files from source gist
            const { data: srcData } = await octokit.gists.get({
              gist_id: srcId
            });

            // Prepare file upload
            let filesToUpdate = {};
            for (const [filename, fileObj] of Object.entries(srcData.files)) {
              filesToUpdate[filename] = {
                content: fileObj.content
              };
            }

            // Update files in destination gist
            await octokit.gists.update({
              gist_id: dstId,
              files: filesToUpdate
            });
            console.log("Files copied successfully.");
