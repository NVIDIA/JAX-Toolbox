name: Nightly Manifest Update
run-name: Nightly Manifest Update (${{ github.event_name == 'workflow_run' && format('nightly {0}', github.event.workflow_run.created_at) || github.event_name }})

on:
  workflow_dispatch:
  workflow_run:
    workflows:
      - Nightly Dsitribution test
      - Nightly JAX unit test
      - Nightly Transformer Engine test
      - Nightly Pax MGMN performance test  # The trial branch is propagated thru this workflow
      - Nightly T5X MGMN performance test
      - Nightly Rosetta Paxml build and test
      - Nightly Rosetta T5x build and test
    types: [completed]
    branches: [main]

permissions:
  contents: write # to fetch code, and create commits
  actions:  write # to cancel previous workflows
  packages: write # to upload container

env:
  # The check is based on the run-name, not name. Given the suffix involves a date, we only check the prefix
  THIS_WORKFLOW_NAME_PREFIX: Nightly Manifest Update
  # This should match the number of runs in on.workflow_run.workflows[] | length
  MAX_WORKFLOWS: 7

jobs:

  metadata:
    runs-on: ubuntu-22.04
    steps:
      - name: Set build date
        run: env
      - name:
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"
  kill:
    runs-on: ubuntu-22.04
    needs: metadata
    outputs:
      # Outcome is before continue-on-error is appled and conclusion is after
      status: ${{ steps.k_step.outcome }}
    steps:
      - name: kill if not latest
        id: k_step
        continue-on-error: true
        #uses: actions/github-script@e69ef5462fd455e02edcaf4dd7708eda96b9eda0 # v7.0.0
        uses: actions/github-script@v7
        env:
          MAX_TIMEOUT: 120
          POLLING_INTERVAL: 10
          WORKFLOW_RUN_ID: ${{ github.run_id }}
          THIS_WORKFLOW_NAME_PREFIX: ${{ env.THIS_WORKFLOW_NAME_PREFIX }}
          MAX_WORKFLOWS: ${{ env.MAX_WORKFLOWS }}
          DEBUG: "true"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            async function checkWorkflows(github, context, WORKFLOW_RUN_ID, THIS_WORKFLOW_NAME_PREFIX, MAX_WORKFLOWS) {
              const { DEBUG, GITHUB_SHA } = process.env
  
              // https://octokit.github.io/rest.js/v19#actions-list-workflow-runs-for-repo
              const WORKFLOW_RUNS_FOR_REPO_RESPONSE = await github.rest.actions.listWorkflowRunsForRepo({
                owner: context.payload.sender.login,
                repo: context.payload.repository.name,
                head_sha: context.payload.after || GITHUB_SHA
              })
  
              if (DEBUG) {
                console.log("workflow_runs length:", WORKFLOW_RUNS_FOR_REPO_RESPONSE.data.workflow_runs.length)
                const workflows = WORKFLOW_RUNS_FOR_REPO_RESPONSE.data.workflow_runs.reduce((acc, val) => acc.concat([{ run_id: val.id, name: val.name, workflow_id: val.workflow_id, run_attempt: val.run_attempt }]), [])
                console.log("workflow_runs:", workflows)
              }
  
              // These are all the instances of this workflow, excluding this run.
              const THIS_WORKFLOW = WORKFLOW_RUNS_FOR_REPO_RESPONSE.data.workflow_runs.filter(
                (run) => (run.name.startsWith(THIS_WORKFLOW_NAME_PREFIX) && run.id !== WORKFLOW_RUN_ID)
              );
              // Find the largest run.id in THIS_WORKFLOW
              let largestRunId = Number.MIN_SAFE_INTEGER;
              WORKFLOW_RUNS_FOR_REPO_RESPONSE.data.workflow_runs.forEach((run) => {
                if (run.id > largestRunId) {
                  largestRunId = run.id;
                }
              });

              // Check if the current workflow run ID is the largest
              const isLargestRunId = WORKFLOW_RUN_ID === largestRunId;
              console.log(`Largest run.id : ${largestRunId}`);
              console.log(`Current WORKFLOW_RUN_ID is largest: ${isLargestRunId}`);
              console.log(`Waiting for ${THIS_WORKFLOW.length} workflows to finish:`);
              if (THIS_WORKFLOW.length > 0) {
                THIS_WORKFLOW.forEach((workflow) => {
                  console.log(`Workflow: name=${workflow.name} id=${workflow.id} status=${workflow.status}`);
                });
              }
  
              if (isLargestRunId) {
                if (THIS_WORKFLOW.length === (MAX_WORKFLOWS - 1)) {
                  console.log("This is the largest run.id and all workflows have been been started. This is the workflow that shall run");
                  return false;
                } else {
                  console.log("Since this is the lowest run.id, but not all workflows have started");
                  return true;
                }
              } else if (THIS_WORKFLOW.length === 0) {
                console.log(`There are no other workflows running, we need to wait for more to start`);
                return true
              }
              // Getting here means THIS_WORKFLOW > 0 and this isn't the largest run id, so we can safely kill it
              console.log(`This is not the largest run id so we can safely kill it`);
              process.exit(2)
            }
  
            async function sleep(seconds) {
              return new Promise((resolve) => setTimeout(resolve, seconds * 1000));
            }
  
            const { DEBUG } = process.env
  
            if (DEBUG) {
              console.log(`process.env.MAX_TIMEOUT: ${process.env.MAX_TIMEOUT}`)
              console.log(`process.env.POLLING_INTERVAL: ${process.env.POLLING_INTERVAL}`)
              console.log("context:", context)
            }
  
            const MAX_TIMEOUT = Number(process.env.MAX_TIMEOUT)
            const POLLING_INTERVAL = Number(process.env.POLLING_INTERVAL)
            const WORKFLOW_RUN_ID = Number(process.env.WORKFLOW_RUN_ID)
            const THIS_WORKFLOW_NAME_PREFIX = process.env.THIS_WORKFLOW_NAME_PREFIX
            const MAX_WORKFLOWS = Number(process.env.MAX_WORKFLOWS)
  
            if (DEBUG) {
              console.log(`MAX_TIMEOUT: ${MAX_TIMEOUT}`)
              console.log(`POLLING_INTERVAL: ${POLLING_INTERVAL}`)
              console.log(`THIS_WORKFLOW_NAME_PREFIX: ${THIS_WORKFLOW_NAME_PREFIX}`)
              console.log(`MAX_WORKFLOWS: ${MAX_WORKFLOWS}`)
            }
  
            let timer = 0
  
            await sleep(5)
  
            console.log(`Waiting time ${timer}s out of ${MAX_TIMEOUT}s with polling interval ${POLLING_INTERVAL}s`);
            while (timer < MAX_TIMEOUT && (await checkWorkflows(github, context, WORKFLOW_RUN_ID, THIS_WORKFLOW_NAME_PREFIX, MAX_WORKFLOWS))) {
              await sleep(POLLING_INTERVAL)
              timer += POLLING_INTERVAL
              console.log(`Waiting time ${timer}s out of ${MAX_TIMEOUT}s with polling interval ${POLLING_INTERVAL}s`);
            }
  
            if (timer >= MAX_TIMEOUT) {
              console.error(`Wait for workflows is over MAX_TIMEOUT of ${MAX_TIMEOUT}s`)
              process.exit(1)
            }

  
  afterWait:
    name: after-wait
    needs: [kill]
    runs-on: ubuntu-22.04
    steps:
      - name: github dump
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"
      - name: print kill status
        run: echo ${{ needs.kill.outputs.status }}
      - name: Cancel workflow if upstream workflow did not success
        if: needs.kill.outputs.status != 'success'
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repository}/actions/runs/{run_id}/cancel
          repository: ${{ github.repository }}
          run_id: ${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Dummy wait if things were not successful
        if: needs.kill.outputs.status != 'success'
        run: sleep 60