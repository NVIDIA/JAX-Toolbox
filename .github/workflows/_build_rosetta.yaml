name: ~build Rosetta container

on:
  workflow_call:
    inputs:
      BASE_LIBRARY:
        type: string
        description: 'Choice of base library to build on:'
        required: false
        default: t5x
      BASE_IMAGE:
        type: string
        description: 'Base docker image that provides the foundation library'
        required: false
      BUILD_DATE:
        type: string
        description: "Build date in YYYY-MM-DD format"
        required: false
        default: 'NOT SPECIFIED'
    outputs:
      DOCKER_TAGS:
        description: "Tags of the image built"
        value: ${{ jobs.merge.outputs.DOCKER_TAGS }}

env:
  UPLD_IMAGE: ghcr.io/nvidia/jax-toolbox-internal
  DOCKER_REGISTRY: ghcr.io/nvidia

permissions:
  contents: read  # to fetch code
  actions:  write # to cancel previous workflows
  packages: write # to upload container

jobs:

  build:
    strategy:
      fail-fast: false
      matrix:
        PLATFORM: [amd64, arm64]
    outputs:
      DOCKER_TAGS: ${{ steps.meta.outputs.tags }}
    runs-on: [self-hosted, "${{ matrix.PLATFORM }}", small]
    steps:
      - name: Set default BASE_IMAGE
        run: |
          if [[ -n "${{ inputs.BASE_IMAGE }}" ]]; then
            echo "BASE_IMAGE=${{ inputs.BASE_IMAGE }}" >> "$GITHUB_ENV"
          else
            echo "BASE_IMAGE=${{ env.DOCKER_REGISTRY }}/upstream-${{ inputs.BASE_LIBRARY }}:latest" >> "$GITHUB_ENV"
          fi

      - name: Print environment variables
        run: env

      - name: Check out the repository under ${GITHUB_WORKSPACE}
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.UPLD_IMAGE }}
          flavor: latest=false
          tags: type=raw,value=${{ github.run_id }}-${{ inputs.BASE_LIBRARY }}-${{ matrix.PLATFORM }}
          labels: org.opencontainers.image.created=${{ inputs.BUILD_DATE }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            image=moby/buildkit:v0.10.6

      - name: Pull and validate BASE_IMAGE=${{ inputs.BASE_IMAGE }} contains BASE_LIBRARY=${{ inputs.BASE_LIBRARY }}
        shell: bash -x -e {0}
        run: |
          PYTHON_PACKAGE=${{ inputs.BASE_LIBRARY }}
          if [[ $PYTHON_PACKAGE == "pax" ]]; then
            PYTHON_PACKAGE=paxml
          fi
          docker run --rm ${{ inputs.BASE_IMAGE }} python -c "import importlib,sys; sys.exit(importlib.util.find_spec('$PYTHON_PACKAGE') is None)"

      - name: Build docker images
        uses: docker/build-push-action@v4
        with:
          context: rosetta/
          push: true
          file: rosetta/Dockerfile.${{ inputs.BASE_LIBRARY }}
          platforms: linux/${{ matrix.PLATFORM }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: rosetta
          build-args: |
            BASE_IMAGE=${{ inputs.BASE_IMAGE }}

      # Temporary workaround until the following issues are solved:
      # https://github.com/orgs/community/discussions/17245
      # https://github.com/actions/runner/pull/2477
      # https://github.com/orgs/community/discussions/26639
      - name: Save image name as text file
        shell: bash -x -e {0}
        run: |
          echo "${{ steps.meta.outputs.tags }}" >> image-name.txt

      - name: Upload image name file as artifact
        uses: actions/upload-artifact@v3
        with:
          name: image-name-${{ inputs.BASE_LIBRARY }}-${{ matrix.PLATFORM }}
          path: image-name.txt

  merge:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      DOCKER_TAGS: ${{ steps.meta.outputs.tags }}
    steps:
      # TODO: currently downloading all artifacts of the entire workflow
      # Revise when this request is fulfilled:
      # https://github.com/actions/download-artifact/issues/214
      - name: Download image name files into separate folders
        uses: actions/download-artifact@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.UPLD_IMAGE }}
          flavor: |
            latest=false
          tags: |
            type=raw,value=${{ github.run_id }}-${{ inputs.BASE_LIBRARY }}-multiarch
          labels:
            org.opencontainers.image.created=${{ inputs.BUILD_DATE }}

      - name: Combine images into a single multi-arch image
        shell: bash -x -e {0}
        run: |
          docker manifest create ${{ steps.meta.outputs.tags }} $(
            for IMAGE in $(cat image-name-${{ inputs.BASE_LIBRARY }}-*/image-name.txt); do
              REPO=$(echo $IMAGE | cut -d: -f1)
              DIGEST=$(
                docker manifest inspect $IMAGE |\
                jq -r '.manifests[] | select(.platform.os == "linux") | .digest'
              )
              echo $REPO@${DIGEST}
            done
          )
          docker manifest push ${{ steps.meta.outputs.tags }}